
bldc_atmel_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00000948  000009dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000948  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000628  00800300  00800300  00000bdc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c11  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f5f  00000000  00000000  00002a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001034  00000000  00000000  00003968  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  0000499c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008c04  00000000  00000000  00004ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012f1  00000000  00000000  0000dad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000edc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000135b  00000000  00000000  0000ef15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	5d c2       	rjmp	.+1210   	; 0x4f4 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	13 e0       	ldi	r17, 0x03	; 3
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e4       	ldi	r30, 0x48	; 72
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	29 e0       	ldi	r18, 0x09	; 9
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b3 e0       	ldi	r27, 0x03	; 3
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	77 d2       	rcall	.+1262   	; 0x5b2 <main>
  c4:	3f c4       	rjmp	.+2174   	; 0x944 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <bldc_interface_init>:
 * @param len
 * The data length.
 */
void bldc_interface_send_packet(unsigned char *data, unsigned int len) {
	if (send_func) {
		send_func(data, len);
  c8:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <__data_end+0x1>
  cc:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
  d0:	08 95       	ret

000000d2 <bldc_interface_set_current>:
	}
}

// Setters
void bldc_interface_set_current(float current) {
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <bldc_interface_set_current+0xe>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <bldc_interface_set_current+0x10>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	ab 01       	movw	r20, r22
  e8:	bc 01       	movw	r22, r24
	int32_t send_index = 0;
	send_buffer[send_index++] = COMM_SET_CURRENT;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	89 83       	std	Y+1, r24	; 0x01
  f4:	9a 83       	std	Y+2, r25	; 0x02
  f6:	ab 83       	std	Y+3, r26	; 0x03
  f8:	bc 83       	std	Y+4, r27	; 0x04
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <send_buffer>
	buffer_append_float32(send_buffer, current, 1000.0, &send_index);
 100:	ce 01       	movw	r24, r28
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	7c 01       	movw	r14, r24
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	10 e0       	ldi	r17, 0x00	; 0
 10a:	2a e7       	ldi	r18, 0x7A	; 122
 10c:	34 e4       	ldi	r19, 0x44	; 68
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	93 e0       	ldi	r25, 0x03	; 3
 112:	70 d0       	rcall	.+224    	; 0x1f4 <buffer_append_float32>
}
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	ff 90       	pop	r15
 126:	ef 90       	pop	r14
 128:	08 95       	ret

0000012a <send_packet_bldc_interface>:
 * @param len
 * Data array length
 */
static void send_packet_bldc_interface(unsigned char *data, unsigned int len) {
	// Pass the packet to the packet handler to add checksum, length, start and stop bytes.
	packet_send_packet(data, len, PACKET_HANDLER);
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	a6 c0       	rjmp	.+332    	; 0x27c <packet_send_packet>
 130:	08 95       	ret

00000132 <bldc_interface_uart_init>:
 * @param func
 * Function provided for sending packets.
 */
void bldc_interface_uart_init(void(*func)(unsigned char *data, unsigned int len)) {
	// Initialize packet handler
	packet_init(func, PACKET_HANDLER);
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	94 d0       	rcall	.+296    	; 0x260 <packet_init>

	// Initialize the bldc interface and provide a send function
	bldc_interface_init(send_packet_bldc_interface);
 138:	85 e9       	ldi	r24, 0x95	; 149
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	c5 cf       	rjmp	.-118    	; 0xc8 <bldc_interface_init>
 13e:	08 95       	ret

00000140 <buffer_append_int32>:
	buffer[(*index)++] = number;
}

void buffer_append_float16(uint8_t* buffer, float number, float scale, int32_t *index) {
    buffer_append_int16(buffer, (int16_t)(number * scale), index);
}
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	f9 01       	movw	r30, r18
 14e:	00 81       	ld	r16, Z
 150:	11 81       	ldd	r17, Z+1	; 0x01
 152:	22 81       	ldd	r18, Z+2	; 0x02
 154:	33 81       	ldd	r19, Z+3	; 0x03
 156:	68 01       	movw	r12, r16
 158:	79 01       	movw	r14, r18
 15a:	af ef       	ldi	r26, 0xFF	; 255
 15c:	ca 1a       	sub	r12, r26
 15e:	da 0a       	sbc	r13, r26
 160:	ea 0a       	sbc	r14, r26
 162:	fa 0a       	sbc	r15, r26
 164:	c0 82       	st	Z, r12
 166:	d1 82       	std	Z+1, r13	; 0x01
 168:	e2 82       	std	Z+2, r14	; 0x02
 16a:	f3 82       	std	Z+3, r15	; 0x03
 16c:	dc 01       	movw	r26, r24
 16e:	a0 0f       	add	r26, r16
 170:	b1 1f       	adc	r27, r17
 172:	7c 93       	st	X, r23
 174:	00 81       	ld	r16, Z
 176:	11 81       	ldd	r17, Z+1	; 0x01
 178:	22 81       	ldd	r18, Z+2	; 0x02
 17a:	33 81       	ldd	r19, Z+3	; 0x03
 17c:	68 01       	movw	r12, r16
 17e:	79 01       	movw	r14, r18
 180:	7f ef       	ldi	r23, 0xFF	; 255
 182:	c7 1a       	sub	r12, r23
 184:	d7 0a       	sbc	r13, r23
 186:	e7 0a       	sbc	r14, r23
 188:	f7 0a       	sbc	r15, r23
 18a:	c0 82       	st	Z, r12
 18c:	d1 82       	std	Z+1, r13	; 0x01
 18e:	e2 82       	std	Z+2, r14	; 0x02
 190:	f3 82       	std	Z+3, r15	; 0x03
 192:	dc 01       	movw	r26, r24
 194:	a0 0f       	add	r26, r16
 196:	b1 1f       	adc	r27, r17
 198:	6c 93       	st	X, r22
 19a:	00 81       	ld	r16, Z
 19c:	11 81       	ldd	r17, Z+1	; 0x01
 19e:	22 81       	ldd	r18, Z+2	; 0x02
 1a0:	33 81       	ldd	r19, Z+3	; 0x03
 1a2:	68 01       	movw	r12, r16
 1a4:	79 01       	movw	r14, r18
 1a6:	af ef       	ldi	r26, 0xFF	; 255
 1a8:	ca 1a       	sub	r12, r26
 1aa:	da 0a       	sbc	r13, r26
 1ac:	ea 0a       	sbc	r14, r26
 1ae:	fa 0a       	sbc	r15, r26
 1b0:	c0 82       	st	Z, r12
 1b2:	d1 82       	std	Z+1, r13	; 0x01
 1b4:	e2 82       	std	Z+2, r14	; 0x02
 1b6:	f3 82       	std	Z+3, r15	; 0x03
 1b8:	dc 01       	movw	r26, r24
 1ba:	a0 0f       	add	r26, r16
 1bc:	b1 1f       	adc	r27, r17
 1be:	5c 93       	st	X, r21
 1c0:	00 81       	ld	r16, Z
 1c2:	11 81       	ldd	r17, Z+1	; 0x01
 1c4:	22 81       	ldd	r18, Z+2	; 0x02
 1c6:	33 81       	ldd	r19, Z+3	; 0x03
 1c8:	68 01       	movw	r12, r16
 1ca:	79 01       	movw	r14, r18
 1cc:	5f ef       	ldi	r21, 0xFF	; 255
 1ce:	c5 1a       	sub	r12, r21
 1d0:	d5 0a       	sbc	r13, r21
 1d2:	e5 0a       	sbc	r14, r21
 1d4:	f5 0a       	sbc	r15, r21
 1d6:	c0 82       	st	Z, r12
 1d8:	d1 82       	std	Z+1, r13	; 0x01
 1da:	e2 82       	std	Z+2, r14	; 0x02
 1dc:	f3 82       	std	Z+3, r15	; 0x03
 1de:	fc 01       	movw	r30, r24
 1e0:	e0 0f       	add	r30, r16
 1e2:	f1 1f       	adc	r31, r17
 1e4:	40 83       	st	Z, r20
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	cf 90       	pop	r12
 1f2:	08 95       	ret

000001f4 <buffer_append_float32>:

void buffer_append_float32(uint8_t* buffer, float number, float scale, int32_t *index) {
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
 202:	cb 01       	movw	r24, r22
 204:	ba 01       	movw	r22, r20
    buffer_append_int32(buffer, (int32_t)(number * scale), index);
 206:	a9 01       	movw	r20, r18
 208:	98 01       	movw	r18, r16
 20a:	30 d3       	rcall	.+1632   	; 0x86c <__mulsf3>
 20c:	48 d2       	rcall	.+1168   	; 0x69e <__fixsfsi>
 20e:	ab 01       	movw	r20, r22
 210:	bc 01       	movw	r22, r24
 212:	97 01       	movw	r18, r14
 214:	ce 01       	movw	r24, r28
 216:	94 df       	rcall	.-216    	; 0x140 <buffer_append_int32>
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	08 95       	ret

00000226 <crc16>:
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
	for (i = 0; i < len; i++) {
 226:	61 15       	cp	r22, r1
 228:	71 05       	cpc	r23, r1
 22a:	b9 f0       	breq	.+46     	; 0x25a <crc16+0x34>
 22c:	dc 01       	movw	r26, r24
 22e:	68 0f       	add	r22, r24
 230:	79 1f       	adc	r23, r25
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 236:	2d 91       	ld	r18, X+
 238:	e9 2f       	mov	r30, r25
 23a:	ff 27       	eor	r31, r31
 23c:	e2 27       	eor	r30, r18
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	e0 50       	subi	r30, 0x00	; 0
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	20 81       	ld	r18, Z
 248:	31 81       	ldd	r19, Z+1	; 0x01
 24a:	98 2f       	mov	r25, r24
 24c:	88 27       	eor	r24, r24
 24e:	82 27       	eor	r24, r18
 250:	93 27       	eor	r25, r19
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
	for (i = 0; i < len; i++) {
 252:	a6 17       	cp	r26, r22
 254:	b7 07       	cpc	r27, r23
 256:	79 f7       	brne	.-34     	; 0x236 <crc16+0x10>
 258:	08 95       	ret
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
	for (i = 0; i < len; i++) {
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
	}
	return cksum;
}
 25e:	08 95       	ret

00000260 <packet_init>:
} PACKET_STATE_t;

static PACKET_STATE_t handler_states[PACKET_HANDLERS];

void packet_init(void (*s_func)(unsigned char *data, unsigned int len), int handler_num) {
	handler_states[handler_num].send_func = s_func;
 260:	20 e1       	ldi	r18, 0x10	; 16
 262:	34 e0       	ldi	r19, 0x04	; 4
 264:	62 9f       	mul	r22, r18
 266:	f0 01       	movw	r30, r0
 268:	63 9f       	mul	r22, r19
 26a:	f0 0d       	add	r31, r0
 26c:	72 9f       	mul	r23, r18
 26e:	f0 0d       	add	r31, r0
 270:	11 24       	eor	r1, r1
 272:	ee 5f       	subi	r30, 0xFE	; 254
 274:	fa 4f       	sbci	r31, 0xFA	; 250
 276:	93 83       	std	Z+3, r25	; 0x03
 278:	82 83       	std	Z+2, r24	; 0x02
 27a:	08 95       	ret

0000027c <packet_send_packet>:
}

void packet_send_packet(unsigned char *data, unsigned int len, int handler_num) {
 27c:	af 92       	push	r10
 27e:	bf 92       	push	r11
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	5c 01       	movw	r10, r24
 292:	eb 01       	movw	r28, r22
	if (len > PACKET_MAX_PL_LEN) {
 294:	61 30       	cpi	r22, 0x01	; 1
 296:	22 e0       	ldi	r18, 0x02	; 2
 298:	72 07       	cpc	r23, r18
 29a:	08 f0       	brcs	.+2      	; 0x29e <packet_send_packet+0x22>
 29c:	5f c0       	rjmp	.+190    	; 0x35c <packet_send_packet+0xe0>
		return;
	}

	int b_ind = 0;

	if (len <= 256) {
 29e:	61 30       	cpi	r22, 0x01	; 1
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	78 07       	cpc	r23, r24
 2a4:	a8 f4       	brcc	.+42     	; 0x2d0 <packet_send_packet+0x54>
		handler_states[handler_num].tx_buffer[b_ind++] = 2;
 2a6:	20 e1       	ldi	r18, 0x10	; 16
 2a8:	34 e0       	ldi	r19, 0x04	; 4
 2aa:	42 9f       	mul	r20, r18
 2ac:	c0 01       	movw	r24, r0
 2ae:	43 9f       	mul	r20, r19
 2b0:	90 0d       	add	r25, r0
 2b2:	52 9f       	mul	r21, r18
 2b4:	90 0d       	add	r25, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	8e 5f       	subi	r24, 0xFE	; 254
 2ba:	9a 4f       	sbci	r25, 0xFA	; 250
 2bc:	fc 01       	movw	r30, r24
 2be:	ea 5f       	subi	r30, 0xFA	; 250
 2c0:	fd 4f       	sbci	r31, 0xFD	; 253
 2c2:	22 e0       	ldi	r18, 0x02	; 2
 2c4:	20 83       	st	Z, r18
		handler_states[handler_num].tx_buffer[b_ind++] = len;
 2c6:	31 96       	adiw	r30, 0x01	; 1
 2c8:	60 83       	st	Z, r22
 2ca:	02 e0       	ldi	r16, 0x02	; 2
 2cc:	10 e0       	ldi	r17, 0x00	; 0
 2ce:	16 c0       	rjmp	.+44     	; 0x2fc <packet_send_packet+0x80>
	} else {
		handler_states[handler_num].tx_buffer[b_ind++] = 3;
 2d0:	20 e1       	ldi	r18, 0x10	; 16
 2d2:	34 e0       	ldi	r19, 0x04	; 4
 2d4:	42 9f       	mul	r20, r18
 2d6:	c0 01       	movw	r24, r0
 2d8:	43 9f       	mul	r20, r19
 2da:	90 0d       	add	r25, r0
 2dc:	52 9f       	mul	r21, r18
 2de:	90 0d       	add	r25, r0
 2e0:	11 24       	eor	r1, r1
 2e2:	8e 5f       	subi	r24, 0xFE	; 254
 2e4:	9a 4f       	sbci	r25, 0xFA	; 250
 2e6:	fc 01       	movw	r30, r24
 2e8:	ea 5f       	subi	r30, 0xFA	; 250
 2ea:	fd 4f       	sbci	r31, 0xFD	; 253
 2ec:	23 e0       	ldi	r18, 0x03	; 3
 2ee:	20 83       	st	Z, r18
		handler_states[handler_num].tx_buffer[b_ind++] = len >> 8;
 2f0:	31 96       	adiw	r30, 0x01	; 1
 2f2:	d0 83       	st	Z, r29
		handler_states[handler_num].tx_buffer[b_ind++] = len & 0xFF;
 2f4:	31 96       	adiw	r30, 0x01	; 1
 2f6:	60 83       	st	Z, r22
 2f8:	03 e0       	ldi	r16, 0x03	; 3
 2fa:	10 e0       	ldi	r17, 0x00	; 0
	}

	memcpy(handler_states[handler_num].tx_buffer + b_ind, data, len);
 2fc:	80 e1       	ldi	r24, 0x10	; 16
 2fe:	94 e0       	ldi	r25, 0x04	; 4
 300:	48 9f       	mul	r20, r24
 302:	70 01       	movw	r14, r0
 304:	49 9f       	mul	r20, r25
 306:	f0 0c       	add	r15, r0
 308:	58 9f       	mul	r21, r24
 30a:	f0 0c       	add	r15, r0
 30c:	11 24       	eor	r1, r1
 30e:	c7 01       	movw	r24, r14
 310:	88 5f       	subi	r24, 0xF8	; 248
 312:	98 4f       	sbci	r25, 0xF8	; 248
 314:	6c 01       	movw	r12, r24
 316:	ae 01       	movw	r20, r28
 318:	b5 01       	movw	r22, r10
 31a:	80 0f       	add	r24, r16
 31c:	91 1f       	adc	r25, r17
 31e:	09 d3       	rcall	.+1554   	; 0x932 <memcpy>
	b_ind += len;
 320:	0c 0f       	add	r16, r28
 322:	1d 1f       	adc	r17, r29

	unsigned short crc = crc16(data, len);
 324:	be 01       	movw	r22, r28
 326:	c5 01       	movw	r24, r10
 328:	7e df       	rcall	.-260    	; 0x226 <crc16>
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 32a:	f7 01       	movw	r30, r14
 32c:	ee 5f       	subi	r30, 0xFE	; 254
 32e:	fa 4f       	sbci	r31, 0xFA	; 250
 330:	9f 01       	movw	r18, r30
 332:	20 0f       	add	r18, r16
 334:	31 1f       	adc	r19, r17
 336:	d9 01       	movw	r26, r18
 338:	aa 5f       	subi	r26, 0xFA	; 250
 33a:	bd 4f       	sbci	r27, 0xFD	; 253
 33c:	9c 93       	st	X, r25
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
 33e:	11 96       	adiw	r26, 0x01	; 1
 340:	8c 93       	st	X, r24
	handler_states[handler_num].tx_buffer[b_ind++] = 3;
 342:	b8 01       	movw	r22, r16
 344:	6d 5f       	subi	r22, 0xFD	; 253
 346:	7f 4f       	sbci	r23, 0xFF	; 255
 348:	11 96       	adiw	r26, 0x01	; 1
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	8c 93       	st	X, r24

	if (handler_states[handler_num].send_func) {
 34e:	02 80       	ldd	r0, Z+2	; 0x02
 350:	f3 81       	ldd	r31, Z+3	; 0x03
 352:	e0 2d       	mov	r30, r0
 354:	30 97       	sbiw	r30, 0x00	; 0
 356:	11 f0       	breq	.+4      	; 0x35c <packet_send_packet+0xe0>
		handler_states[handler_num].send_func(handler_states[handler_num].tx_buffer, b_ind);
 358:	c6 01       	movw	r24, r12
 35a:	09 95       	icall
	}
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	df 90       	pop	r13
 36a:	cf 90       	pop	r12
 36c:	bf 90       	pop	r11
 36e:	af 90       	pop	r10
 370:	08 95       	ret

00000372 <send_packet>:
    DDRD |= (1<<PD0);   //SPI SS pin
    DDRD &= ~(1<<PD7)|(1<<PD6);  //Configure Port D Pin 7, 6 for input
    PORTD |= (1<<PD7);  //enable pullup
    timer1_init();      //initialize 16 bit timer
    uart_init(MYUBBR);	//initialize uart
    sei();
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	9c 01       	movw	r18, r24
 378:	eb e9       	ldi	r30, 0x9B	; 155
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	90 81       	ld	r25, Z
 37e:	95 ff       	sbrs	r25, 5
 380:	fd cf       	rjmp	.-6      	; 0x37c <send_packet+0xa>
 382:	61 15       	cp	r22, r1
 384:	71 05       	cpc	r23, r1
 386:	99 f0       	breq	.+38     	; 0x3ae <send_packet+0x3c>
 388:	d9 01       	movw	r26, r18
 38a:	62 0f       	add	r22, r18
 38c:	73 1f       	adc	r23, r19
 38e:	cc e9       	ldi	r28, 0x9C	; 156
 390:	d0 e0       	ldi	r29, 0x00	; 0
 392:	eb e9       	ldi	r30, 0x9B	; 155
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	9d 91       	ld	r25, X+
 398:	98 83       	st	Y, r25
 39a:	90 81       	ld	r25, Z
 39c:	95 ff       	sbrs	r25, 5
 39e:	fd cf       	rjmp	.-6      	; 0x39a <send_packet+0x28>
 3a0:	81 e2       	ldi	r24, 0x21	; 33
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <send_packet+0x30>
 3a6:	00 00       	nop
 3a8:	a6 17       	cp	r26, r22
 3aa:	b7 07       	cpc	r27, r23
 3ac:	a1 f7       	brne	.-24     	; 0x396 <send_packet+0x24>
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <timer1_init>:
 3b4:	8f b5       	in	r24, 0x2f	; 47
 3b6:	83 60       	ori	r24, 0x03	; 3
 3b8:	8f bd       	out	0x2f, r24	; 47
 3ba:	8e b5       	in	r24, 0x2e	; 46
 3bc:	88 61       	ori	r24, 0x18	; 24
 3be:	8e bd       	out	0x2e, r24	; 46
 3c0:	8e b5       	in	r24, 0x2e	; 46
 3c2:	83 60       	ori	r24, 0x03	; 3
 3c4:	8e bd       	out	0x2e, r24	; 46
 3c6:	87 ea       	ldi	r24, 0xA7	; 167
 3c8:	91 e6       	ldi	r25, 0x61	; 97
 3ca:	9b bd       	out	0x2b, r25	; 43
 3cc:	8a bd       	out	0x2a, r24	; 42
 3ce:	87 b7       	in	r24, 0x37	; 55
 3d0:	84 60       	ori	r24, 0x04	; 4
 3d2:	87 bf       	out	0x37, r24	; 55
 3d4:	08 95       	ret

000003d6 <motor_torque>:
 3d6:	8f 92       	push	r8
 3d8:	9f 92       	push	r9
 3da:	af 92       	push	r10
 3dc:	bf 92       	push	r11
 3de:	cf 92       	push	r12
 3e0:	df 92       	push	r13
 3e2:	ef 92       	push	r14
 3e4:	ff 92       	push	r15
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	7c 01       	movw	r14, r24
 3ee:	6b 01       	movw	r12, r22
 3f0:	8a 01       	movw	r16, r20
 3f2:	c0 b3       	in	r28, 0x10	; 16
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	5f e3       	ldi	r21, 0x3F	; 63
 3fc:	60 91 12 09 	lds	r22, 0x0912	; 0x800912 <general_torque.2387>
 400:	70 91 13 09 	lds	r23, 0x0913	; 0x800913 <general_torque.2387+0x1>
 404:	80 91 14 09 	lds	r24, 0x0914	; 0x800914 <general_torque.2387+0x2>
 408:	90 91 15 09 	lds	r25, 0x0915	; 0x800915 <general_torque.2387+0x3>
 40c:	e0 d0       	rcall	.+448    	; 0x5ce <__addsf3>
 40e:	60 93 12 09 	sts	0x0912, r22	; 0x800912 <general_torque.2387>
 412:	70 93 13 09 	sts	0x0913, r23	; 0x800913 <general_torque.2387+0x1>
 416:	80 93 14 09 	sts	0x0914, r24	; 0x800914 <general_torque.2387+0x2>
 41a:	90 93 15 09 	sts	0x0915, r25	; 0x800915 <general_torque.2387+0x3>
 41e:	f8 01       	movw	r30, r16
 420:	11 82       	std	Z+1, r1	; 0x01
 422:	10 82       	st	Z, r1
 424:	2c 2f       	mov	r18, r28
 426:	2f 67       	ori	r18, 0x7F	; 127
 428:	23 30       	cpi	r18, 0x03	; 3
 42a:	09 f4       	brne	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	4a c0       	rjmp	.+148    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 42e:	2f 37       	cpi	r18, 0x7F	; 127
 430:	19 f0       	breq	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 432:	21 11       	cpse	r18, r1
 434:	2e c0       	rjmp	.+92     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 436:	45 c0       	rjmp	.+138    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	48 ec       	ldi	r20, 0xC8	; 200
 43e:	51 e4       	ldi	r21, 0x41	; 65
 440:	11 d2       	rcall	.+1058   	; 0x864 <__gesf2>
 442:	18 16       	cp	r1, r24
 444:	64 f4       	brge	.+24     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	a8 ec       	ldi	r26, 0xC8	; 200
 44c:	b1 e4       	ldi	r27, 0x41	; 65
 44e:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <general_torque.2387>
 452:	90 93 13 09 	sts	0x0913, r25	; 0x800913 <general_torque.2387+0x1>
 456:	a0 93 14 09 	sts	0x0914, r26	; 0x800914 <general_torque.2387+0x2>
 45a:	b0 93 15 09 	sts	0x0915, r27	; 0x800915 <general_torque.2387+0x3>
 45e:	80 90 12 09 	lds	r8, 0x0912	; 0x800912 <general_torque.2387>
 462:	90 90 13 09 	lds	r9, 0x0913	; 0x800913 <general_torque.2387+0x1>
 466:	a0 90 14 09 	lds	r10, 0x0914	; 0x800914 <general_torque.2387+0x2>
 46a:	b0 90 15 09 	lds	r11, 0x0915	; 0x800915 <general_torque.2387+0x3>
 46e:	26 ea       	ldi	r18, 0xA6	; 166
 470:	3d ee       	ldi	r19, 0xED	; 237
 472:	4f e7       	ldi	r20, 0x7F	; 127
 474:	5f e3       	ldi	r21, 0x3F	; 63
 476:	c5 01       	movw	r24, r10
 478:	b4 01       	movw	r22, r8
 47a:	f8 d1       	rcall	.+1008   	; 0x86c <__mulsf3>
 47c:	f7 01       	movw	r30, r14
 47e:	60 83       	st	Z, r22
 480:	71 83       	std	Z+1, r23	; 0x01
 482:	82 83       	std	Z+2, r24	; 0x02
 484:	93 83       	std	Z+3, r25	; 0x03
 486:	f6 01       	movw	r30, r12
 488:	80 82       	st	Z, r8
 48a:	91 82       	std	Z+1, r9	; 0x01
 48c:	a2 82       	std	Z+2, r10	; 0x02
 48e:	b3 82       	std	Z+3, r11	; 0x03
 490:	18 c0       	rjmp	.+48     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	a9 01       	movw	r20, r18
 498:	fe d0       	rcall	.+508    	; 0x696 <__cmpsf2>
 49a:	88 23       	and	r24, r24
 49c:	91 f0       	breq	.+36     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 49e:	10 92 12 09 	sts	0x0912, r1	; 0x800912 <general_torque.2387>
 4a2:	10 92 13 09 	sts	0x0913, r1	; 0x800913 <general_torque.2387+0x1>
 4a6:	10 92 14 09 	sts	0x0914, r1	; 0x800914 <general_torque.2387+0x2>
 4aa:	10 92 15 09 	sts	0x0915, r1	; 0x800915 <general_torque.2387+0x3>
 4ae:	f6 01       	movw	r30, r12
 4b0:	10 82       	st	Z, r1
 4b2:	11 82       	std	Z+1, r1	; 0x01
 4b4:	12 82       	std	Z+2, r1	; 0x02
 4b6:	13 82       	std	Z+3, r1	; 0x03
 4b8:	f7 01       	movw	r30, r14
 4ba:	10 82       	st	Z, r1
 4bc:	11 82       	std	Z+1, r1	; 0x01
 4be:	12 82       	std	Z+2, r1	; 0x02
 4c0:	13 82       	std	Z+3, r1	; 0x03
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	df 90       	pop	r13
 4ce:	cf 90       	pop	r12
 4d0:	bf 90       	pop	r11
 4d2:	af 90       	pop	r10
 4d4:	9f 90       	pop	r9
 4d6:	8f 90       	pop	r8
 4d8:	08 95       	ret

000004da <uart_init>:
 4da:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 4de:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 4e2:	88 e1       	ldi	r24, 0x18	; 24
 4e4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 4e8:	ed e9       	ldi	r30, 0x9D	; 157
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	8e 60       	ori	r24, 0x0E	; 14
 4f0:	80 83       	st	Z, r24
 4f2:	08 95       	ret

000004f4 <__vector_14>:
}//program_init

/************************************************************************************************
 * Name: ISR for 16-bit timer
 ************************************************************************************************/
ISR(TIMER1_OVF_vect){
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	0b b6       	in	r0, 0x3b	; 59
 500:	0f 92       	push	r0
 502:	2f 93       	push	r18
 504:	3f 93       	push	r19
 506:	4f 93       	push	r20
 508:	5f 93       	push	r21
 50a:	6f 93       	push	r22
 50c:	7f 93       	push	r23
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	af 93       	push	r26
 514:	bf 93       	push	r27
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	ef 93       	push	r30
 51c:	ff 93       	push	r31
	
	bldc_interface_uart_init(send_packet);
 51e:	89 eb       	ldi	r24, 0xB9	; 185
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	07 de       	rcall	.-1010   	; 0x132 <bldc_interface_uart_init>
		
	//ISR for the 16 bit timer
    PORTB ^= (1<<PB7);
 524:	88 b3       	in	r24, 0x18	; 24
 526:	80 58       	subi	r24, 0x80	; 128
 528:	88 bb       	out	0x18, r24	; 24
    PORTF |= (1<<PF0);
 52a:	c2 e6       	ldi	r28, 0x62	; 98
 52c:	d0 e0       	ldi	r29, 0x00	; 0
 52e:	88 81       	ld	r24, Y
 530:	81 60       	ori	r24, 0x01	; 1
 532:	88 83       	st	Y, r24
    motor_torque(&torque_right, &torque_left, &steering_angle);	//Update motor torques
 534:	4a e1       	ldi	r20, 0x1A	; 26
 536:	59 e0       	ldi	r21, 0x09	; 9
 538:	6c e1       	ldi	r22, 0x1C	; 28
 53a:	79 e0       	ldi	r23, 0x09	; 9
 53c:	80 e2       	ldi	r24, 0x20	; 32
 53e:	99 e0       	ldi	r25, 0x09	; 9
 540:	4a df       	rcall	.-364    	; 0x3d6 <motor_torque>
    steering_angle_float = (float)steering_angle;
 542:	60 91 1a 09 	lds	r22, 0x091A	; 0x80091a <steering_angle>
 546:	70 91 1b 09 	lds	r23, 0x091B	; 0x80091b <steering_angle+0x1>
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	d8 d0       	rcall	.+432    	; 0x700 <__floatunsisf>
 550:	60 93 16 09 	sts	0x0916, r22	; 0x800916 <steering_angle_float>
 554:	70 93 17 09 	sts	0x0917, r23	; 0x800917 <steering_angle_float+0x1>
 558:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <steering_angle_float+0x2>
 55c:	90 93 19 09 	sts	0x0919, r25	; 0x800919 <steering_angle_float+0x3>

    //float_to_bytes(&torque_right, torque_r_bytes);
    //float_to_bytes(&torque_left, torque_l_bytes);
    //float_to_bytes(&steering_angle_float, steering_angle_bytes);

	setcurrent = torque_right;
 560:	60 91 20 09 	lds	r22, 0x0920	; 0x800920 <torque_right>
 564:	70 91 21 09 	lds	r23, 0x0921	; 0x800921 <torque_right+0x1>
 568:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <torque_right+0x2>
 56c:	90 91 23 09 	lds	r25, 0x0923	; 0x800923 <torque_right+0x3>
 570:	60 93 24 09 	sts	0x0924, r22	; 0x800924 <setcurrent>
 574:	70 93 25 09 	sts	0x0925, r23	; 0x800925 <setcurrent+0x1>
 578:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <setcurrent+0x2>
 57c:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <setcurrent+0x3>
    bldc_interface_set_current(setcurrent);
 580:	a8 dd       	rcall	.-1200   	; 0xd2 <bldc_interface_set_current>
    //uart_transmit(torque_r_bytes,4);		//transmit right torque value - float, 4 bytes
    //uart_transmit(torque_l_bytes,4);    		//transmit left torque value - float, 4 bytes
    //uart_transmit(steering_angle_bytes,4);		//transmit steering encoder value - uint16, 2 bytes

//    spi_init();					//Used to initalize SPI for LCD screen if being used
    PORTF &= ~(1<<PF0);
 582:	88 81       	ld	r24, Y
 584:	8e 7f       	andi	r24, 0xFE	; 254
 586:	88 83       	st	Y, r24
}//timer1_isr
 588:	ff 91       	pop	r31
 58a:	ef 91       	pop	r30
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0b be       	out	0x3b, r0	; 59
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <main>:
/************************************************************************************************
 * Name: Main program, initialize all required ports, timers and UART. Loop infinitely.
 ************************************************************************************************/
int main(){
	
    DDRB |= (1<<PB7)|(1<<PB6)|(1<<PB5)|(1<<PB4);
 5b2:	87 b3       	in	r24, 0x17	; 23
 5b4:	80 6f       	ori	r24, 0xF0	; 240
 5b6:	87 bb       	out	0x17, r24	; 23
    DDRF = 0xFF;
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    //DDRD |= (1<<PD0);   //SPI SS pin
    DDRD &= ~(1<<PD7)|(1<<PD6);  //Configure Port D Pin 7, 6 for input
 5be:	8f 98       	cbi	0x11, 7	; 17
    PORTD |= (1<<PD7);  //enable pull up
 5c0:	97 9a       	sbi	0x12, 7	; 18
    timer1_init();      //initialize 16 bit timer
 5c2:	f8 de       	rcall	.-528    	; 0x3b4 <timer1_init>
    uart_init(MYUBBR);	//initialize uart
 5c4:	8c e0       	ldi	r24, 0x0C	; 12
 5c6:	89 df       	rcall	.-238    	; 0x4da <uart_init>
    sei();
 5c8:	78 94       	sei

    while(1){
    }//while
 5ca:	ff cf       	rjmp	.-2      	; 0x5ca <main+0x18>

000005cc <__subsf3>:
 5cc:	50 58       	subi	r21, 0x80	; 128

000005ce <__addsf3>:
 5ce:	bb 27       	eor	r27, r27
 5d0:	aa 27       	eor	r26, r26
 5d2:	0e d0       	rcall	.+28     	; 0x5f0 <__addsf3x>
 5d4:	0d c1       	rjmp	.+538    	; 0x7f0 <__fp_round>
 5d6:	fe d0       	rcall	.+508    	; 0x7d4 <__fp_pscA>
 5d8:	30 f0       	brcs	.+12     	; 0x5e6 <__addsf3+0x18>
 5da:	03 d1       	rcall	.+518    	; 0x7e2 <__fp_pscB>
 5dc:	20 f0       	brcs	.+8      	; 0x5e6 <__addsf3+0x18>
 5de:	31 f4       	brne	.+12     	; 0x5ec <__addsf3+0x1e>
 5e0:	9f 3f       	cpi	r25, 0xFF	; 255
 5e2:	11 f4       	brne	.+4      	; 0x5e8 <__addsf3+0x1a>
 5e4:	1e f4       	brtc	.+6      	; 0x5ec <__addsf3+0x1e>
 5e6:	f3 c0       	rjmp	.+486    	; 0x7ce <__fp_nan>
 5e8:	0e f4       	brtc	.+2      	; 0x5ec <__addsf3+0x1e>
 5ea:	e0 95       	com	r30
 5ec:	e7 fb       	bst	r30, 7
 5ee:	e9 c0       	rjmp	.+466    	; 0x7c2 <__fp_inf>

000005f0 <__addsf3x>:
 5f0:	e9 2f       	mov	r30, r25
 5f2:	0f d1       	rcall	.+542    	; 0x812 <__fp_split3>
 5f4:	80 f3       	brcs	.-32     	; 0x5d6 <__addsf3+0x8>
 5f6:	ba 17       	cp	r27, r26
 5f8:	62 07       	cpc	r22, r18
 5fa:	73 07       	cpc	r23, r19
 5fc:	84 07       	cpc	r24, r20
 5fe:	95 07       	cpc	r25, r21
 600:	18 f0       	brcs	.+6      	; 0x608 <__addsf3x+0x18>
 602:	71 f4       	brne	.+28     	; 0x620 <__addsf3x+0x30>
 604:	9e f5       	brtc	.+102    	; 0x66c <__addsf3x+0x7c>
 606:	27 c1       	rjmp	.+590    	; 0x856 <__fp_zero>
 608:	0e f4       	brtc	.+2      	; 0x60c <__addsf3x+0x1c>
 60a:	e0 95       	com	r30
 60c:	0b 2e       	mov	r0, r27
 60e:	ba 2f       	mov	r27, r26
 610:	a0 2d       	mov	r26, r0
 612:	0b 01       	movw	r0, r22
 614:	b9 01       	movw	r22, r18
 616:	90 01       	movw	r18, r0
 618:	0c 01       	movw	r0, r24
 61a:	ca 01       	movw	r24, r20
 61c:	a0 01       	movw	r20, r0
 61e:	11 24       	eor	r1, r1
 620:	ff 27       	eor	r31, r31
 622:	59 1b       	sub	r21, r25
 624:	99 f0       	breq	.+38     	; 0x64c <__addsf3x+0x5c>
 626:	59 3f       	cpi	r21, 0xF9	; 249
 628:	50 f4       	brcc	.+20     	; 0x63e <__addsf3x+0x4e>
 62a:	50 3e       	cpi	r21, 0xE0	; 224
 62c:	68 f1       	brcs	.+90     	; 0x688 <__addsf3x+0x98>
 62e:	1a 16       	cp	r1, r26
 630:	f0 40       	sbci	r31, 0x00	; 0
 632:	a2 2f       	mov	r26, r18
 634:	23 2f       	mov	r18, r19
 636:	34 2f       	mov	r19, r20
 638:	44 27       	eor	r20, r20
 63a:	58 5f       	subi	r21, 0xF8	; 248
 63c:	f3 cf       	rjmp	.-26     	; 0x624 <__addsf3x+0x34>
 63e:	46 95       	lsr	r20
 640:	37 95       	ror	r19
 642:	27 95       	ror	r18
 644:	a7 95       	ror	r26
 646:	f0 40       	sbci	r31, 0x00	; 0
 648:	53 95       	inc	r21
 64a:	c9 f7       	brne	.-14     	; 0x63e <__addsf3x+0x4e>
 64c:	7e f4       	brtc	.+30     	; 0x66c <__addsf3x+0x7c>
 64e:	1f 16       	cp	r1, r31
 650:	ba 0b       	sbc	r27, r26
 652:	62 0b       	sbc	r22, r18
 654:	73 0b       	sbc	r23, r19
 656:	84 0b       	sbc	r24, r20
 658:	ba f0       	brmi	.+46     	; 0x688 <__addsf3x+0x98>
 65a:	91 50       	subi	r25, 0x01	; 1
 65c:	a1 f0       	breq	.+40     	; 0x686 <__addsf3x+0x96>
 65e:	ff 0f       	add	r31, r31
 660:	bb 1f       	adc	r27, r27
 662:	66 1f       	adc	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	88 1f       	adc	r24, r24
 668:	c2 f7       	brpl	.-16     	; 0x65a <__addsf3x+0x6a>
 66a:	0e c0       	rjmp	.+28     	; 0x688 <__addsf3x+0x98>
 66c:	ba 0f       	add	r27, r26
 66e:	62 1f       	adc	r22, r18
 670:	73 1f       	adc	r23, r19
 672:	84 1f       	adc	r24, r20
 674:	48 f4       	brcc	.+18     	; 0x688 <__addsf3x+0x98>
 676:	87 95       	ror	r24
 678:	77 95       	ror	r23
 67a:	67 95       	ror	r22
 67c:	b7 95       	ror	r27
 67e:	f7 95       	ror	r31
 680:	9e 3f       	cpi	r25, 0xFE	; 254
 682:	08 f0       	brcs	.+2      	; 0x686 <__addsf3x+0x96>
 684:	b3 cf       	rjmp	.-154    	; 0x5ec <__addsf3+0x1e>
 686:	93 95       	inc	r25
 688:	88 0f       	add	r24, r24
 68a:	08 f0       	brcs	.+2      	; 0x68e <__addsf3x+0x9e>
 68c:	99 27       	eor	r25, r25
 68e:	ee 0f       	add	r30, r30
 690:	97 95       	ror	r25
 692:	87 95       	ror	r24
 694:	08 95       	ret

00000696 <__cmpsf2>:
 696:	71 d0       	rcall	.+226    	; 0x77a <__fp_cmp>
 698:	08 f4       	brcc	.+2      	; 0x69c <__cmpsf2+0x6>
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	08 95       	ret

0000069e <__fixsfsi>:
 69e:	04 d0       	rcall	.+8      	; 0x6a8 <__fixunssfsi>
 6a0:	68 94       	set
 6a2:	b1 11       	cpse	r27, r1
 6a4:	d9 c0       	rjmp	.+434    	; 0x858 <__fp_szero>
 6a6:	08 95       	ret

000006a8 <__fixunssfsi>:
 6a8:	bc d0       	rcall	.+376    	; 0x822 <__fp_splitA>
 6aa:	88 f0       	brcs	.+34     	; 0x6ce <__fixunssfsi+0x26>
 6ac:	9f 57       	subi	r25, 0x7F	; 127
 6ae:	90 f0       	brcs	.+36     	; 0x6d4 <__fixunssfsi+0x2c>
 6b0:	b9 2f       	mov	r27, r25
 6b2:	99 27       	eor	r25, r25
 6b4:	b7 51       	subi	r27, 0x17	; 23
 6b6:	a0 f0       	brcs	.+40     	; 0x6e0 <__fixunssfsi+0x38>
 6b8:	d1 f0       	breq	.+52     	; 0x6ee <__fixunssfsi+0x46>
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	1a f0       	brmi	.+6      	; 0x6ca <__fixunssfsi+0x22>
 6c4:	ba 95       	dec	r27
 6c6:	c9 f7       	brne	.-14     	; 0x6ba <__fixunssfsi+0x12>
 6c8:	12 c0       	rjmp	.+36     	; 0x6ee <__fixunssfsi+0x46>
 6ca:	b1 30       	cpi	r27, 0x01	; 1
 6cc:	81 f0       	breq	.+32     	; 0x6ee <__fixunssfsi+0x46>
 6ce:	c3 d0       	rcall	.+390    	; 0x856 <__fp_zero>
 6d0:	b1 e0       	ldi	r27, 0x01	; 1
 6d2:	08 95       	ret
 6d4:	c0 c0       	rjmp	.+384    	; 0x856 <__fp_zero>
 6d6:	67 2f       	mov	r22, r23
 6d8:	78 2f       	mov	r23, r24
 6da:	88 27       	eor	r24, r24
 6dc:	b8 5f       	subi	r27, 0xF8	; 248
 6de:	39 f0       	breq	.+14     	; 0x6ee <__fixunssfsi+0x46>
 6e0:	b9 3f       	cpi	r27, 0xF9	; 249
 6e2:	cc f3       	brlt	.-14     	; 0x6d6 <__fixunssfsi+0x2e>
 6e4:	86 95       	lsr	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b3 95       	inc	r27
 6ec:	d9 f7       	brne	.-10     	; 0x6e4 <__fixunssfsi+0x3c>
 6ee:	3e f4       	brtc	.+14     	; 0x6fe <__fixunssfsi+0x56>
 6f0:	90 95       	com	r25
 6f2:	80 95       	com	r24
 6f4:	70 95       	com	r23
 6f6:	61 95       	neg	r22
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	8f 4f       	sbci	r24, 0xFF	; 255
 6fc:	9f 4f       	sbci	r25, 0xFF	; 255
 6fe:	08 95       	ret

00000700 <__floatunsisf>:
 700:	e8 94       	clt
 702:	09 c0       	rjmp	.+18     	; 0x716 <__floatsisf+0x12>

00000704 <__floatsisf>:
 704:	97 fb       	bst	r25, 7
 706:	3e f4       	brtc	.+14     	; 0x716 <__floatsisf+0x12>
 708:	90 95       	com	r25
 70a:	80 95       	com	r24
 70c:	70 95       	com	r23
 70e:	61 95       	neg	r22
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	99 23       	and	r25, r25
 718:	a9 f0       	breq	.+42     	; 0x744 <__floatsisf+0x40>
 71a:	f9 2f       	mov	r31, r25
 71c:	96 e9       	ldi	r25, 0x96	; 150
 71e:	bb 27       	eor	r27, r27
 720:	93 95       	inc	r25
 722:	f6 95       	lsr	r31
 724:	87 95       	ror	r24
 726:	77 95       	ror	r23
 728:	67 95       	ror	r22
 72a:	b7 95       	ror	r27
 72c:	f1 11       	cpse	r31, r1
 72e:	f8 cf       	rjmp	.-16     	; 0x720 <__floatsisf+0x1c>
 730:	fa f4       	brpl	.+62     	; 0x770 <__floatsisf+0x6c>
 732:	bb 0f       	add	r27, r27
 734:	11 f4       	brne	.+4      	; 0x73a <__floatsisf+0x36>
 736:	60 ff       	sbrs	r22, 0
 738:	1b c0       	rjmp	.+54     	; 0x770 <__floatsisf+0x6c>
 73a:	6f 5f       	subi	r22, 0xFF	; 255
 73c:	7f 4f       	sbci	r23, 0xFF	; 255
 73e:	8f 4f       	sbci	r24, 0xFF	; 255
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	16 c0       	rjmp	.+44     	; 0x770 <__floatsisf+0x6c>
 744:	88 23       	and	r24, r24
 746:	11 f0       	breq	.+4      	; 0x74c <__floatsisf+0x48>
 748:	96 e9       	ldi	r25, 0x96	; 150
 74a:	11 c0       	rjmp	.+34     	; 0x76e <__floatsisf+0x6a>
 74c:	77 23       	and	r23, r23
 74e:	21 f0       	breq	.+8      	; 0x758 <__floatsisf+0x54>
 750:	9e e8       	ldi	r25, 0x8E	; 142
 752:	87 2f       	mov	r24, r23
 754:	76 2f       	mov	r23, r22
 756:	05 c0       	rjmp	.+10     	; 0x762 <__floatsisf+0x5e>
 758:	66 23       	and	r22, r22
 75a:	71 f0       	breq	.+28     	; 0x778 <__floatsisf+0x74>
 75c:	96 e8       	ldi	r25, 0x86	; 134
 75e:	86 2f       	mov	r24, r22
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	60 e0       	ldi	r22, 0x00	; 0
 764:	2a f0       	brmi	.+10     	; 0x770 <__floatsisf+0x6c>
 766:	9a 95       	dec	r25
 768:	66 0f       	add	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	88 1f       	adc	r24, r24
 76e:	da f7       	brpl	.-10     	; 0x766 <__floatsisf+0x62>
 770:	88 0f       	add	r24, r24
 772:	96 95       	lsr	r25
 774:	87 95       	ror	r24
 776:	97 f9       	bld	r25, 7
 778:	08 95       	ret

0000077a <__fp_cmp>:
 77a:	99 0f       	add	r25, r25
 77c:	00 08       	sbc	r0, r0
 77e:	55 0f       	add	r21, r21
 780:	aa 0b       	sbc	r26, r26
 782:	e0 e8       	ldi	r30, 0x80	; 128
 784:	fe ef       	ldi	r31, 0xFE	; 254
 786:	16 16       	cp	r1, r22
 788:	17 06       	cpc	r1, r23
 78a:	e8 07       	cpc	r30, r24
 78c:	f9 07       	cpc	r31, r25
 78e:	c0 f0       	brcs	.+48     	; 0x7c0 <__fp_cmp+0x46>
 790:	12 16       	cp	r1, r18
 792:	13 06       	cpc	r1, r19
 794:	e4 07       	cpc	r30, r20
 796:	f5 07       	cpc	r31, r21
 798:	98 f0       	brcs	.+38     	; 0x7c0 <__fp_cmp+0x46>
 79a:	62 1b       	sub	r22, r18
 79c:	73 0b       	sbc	r23, r19
 79e:	84 0b       	sbc	r24, r20
 7a0:	95 0b       	sbc	r25, r21
 7a2:	39 f4       	brne	.+14     	; 0x7b2 <__fp_cmp+0x38>
 7a4:	0a 26       	eor	r0, r26
 7a6:	61 f0       	breq	.+24     	; 0x7c0 <__fp_cmp+0x46>
 7a8:	23 2b       	or	r18, r19
 7aa:	24 2b       	or	r18, r20
 7ac:	25 2b       	or	r18, r21
 7ae:	21 f4       	brne	.+8      	; 0x7b8 <__fp_cmp+0x3e>
 7b0:	08 95       	ret
 7b2:	0a 26       	eor	r0, r26
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <__fp_cmp+0x3e>
 7b6:	a1 40       	sbci	r26, 0x01	; 1
 7b8:	a6 95       	lsr	r26
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	81 1d       	adc	r24, r1
 7be:	81 1d       	adc	r24, r1
 7c0:	08 95       	ret

000007c2 <__fp_inf>:
 7c2:	97 f9       	bld	r25, 7
 7c4:	9f 67       	ori	r25, 0x7F	; 127
 7c6:	80 e8       	ldi	r24, 0x80	; 128
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	08 95       	ret

000007ce <__fp_nan>:
 7ce:	9f ef       	ldi	r25, 0xFF	; 255
 7d0:	80 ec       	ldi	r24, 0xC0	; 192
 7d2:	08 95       	ret

000007d4 <__fp_pscA>:
 7d4:	00 24       	eor	r0, r0
 7d6:	0a 94       	dec	r0
 7d8:	16 16       	cp	r1, r22
 7da:	17 06       	cpc	r1, r23
 7dc:	18 06       	cpc	r1, r24
 7de:	09 06       	cpc	r0, r25
 7e0:	08 95       	ret

000007e2 <__fp_pscB>:
 7e2:	00 24       	eor	r0, r0
 7e4:	0a 94       	dec	r0
 7e6:	12 16       	cp	r1, r18
 7e8:	13 06       	cpc	r1, r19
 7ea:	14 06       	cpc	r1, r20
 7ec:	05 06       	cpc	r0, r21
 7ee:	08 95       	ret

000007f0 <__fp_round>:
 7f0:	09 2e       	mov	r0, r25
 7f2:	03 94       	inc	r0
 7f4:	00 0c       	add	r0, r0
 7f6:	11 f4       	brne	.+4      	; 0x7fc <__fp_round+0xc>
 7f8:	88 23       	and	r24, r24
 7fa:	52 f0       	brmi	.+20     	; 0x810 <__fp_round+0x20>
 7fc:	bb 0f       	add	r27, r27
 7fe:	40 f4       	brcc	.+16     	; 0x810 <__fp_round+0x20>
 800:	bf 2b       	or	r27, r31
 802:	11 f4       	brne	.+4      	; 0x808 <__fp_round+0x18>
 804:	60 ff       	sbrs	r22, 0
 806:	04 c0       	rjmp	.+8      	; 0x810 <__fp_round+0x20>
 808:	6f 5f       	subi	r22, 0xFF	; 255
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	08 95       	ret

00000812 <__fp_split3>:
 812:	57 fd       	sbrc	r21, 7
 814:	90 58       	subi	r25, 0x80	; 128
 816:	44 0f       	add	r20, r20
 818:	55 1f       	adc	r21, r21
 81a:	59 f0       	breq	.+22     	; 0x832 <__fp_splitA+0x10>
 81c:	5f 3f       	cpi	r21, 0xFF	; 255
 81e:	71 f0       	breq	.+28     	; 0x83c <__fp_splitA+0x1a>
 820:	47 95       	ror	r20

00000822 <__fp_splitA>:
 822:	88 0f       	add	r24, r24
 824:	97 fb       	bst	r25, 7
 826:	99 1f       	adc	r25, r25
 828:	61 f0       	breq	.+24     	; 0x842 <__fp_splitA+0x20>
 82a:	9f 3f       	cpi	r25, 0xFF	; 255
 82c:	79 f0       	breq	.+30     	; 0x84c <__fp_splitA+0x2a>
 82e:	87 95       	ror	r24
 830:	08 95       	ret
 832:	12 16       	cp	r1, r18
 834:	13 06       	cpc	r1, r19
 836:	14 06       	cpc	r1, r20
 838:	55 1f       	adc	r21, r21
 83a:	f2 cf       	rjmp	.-28     	; 0x820 <__fp_split3+0xe>
 83c:	46 95       	lsr	r20
 83e:	f1 df       	rcall	.-30     	; 0x822 <__fp_splitA>
 840:	08 c0       	rjmp	.+16     	; 0x852 <__fp_splitA+0x30>
 842:	16 16       	cp	r1, r22
 844:	17 06       	cpc	r1, r23
 846:	18 06       	cpc	r1, r24
 848:	99 1f       	adc	r25, r25
 84a:	f1 cf       	rjmp	.-30     	; 0x82e <__fp_splitA+0xc>
 84c:	86 95       	lsr	r24
 84e:	71 05       	cpc	r23, r1
 850:	61 05       	cpc	r22, r1
 852:	08 94       	sec
 854:	08 95       	ret

00000856 <__fp_zero>:
 856:	e8 94       	clt

00000858 <__fp_szero>:
 858:	bb 27       	eor	r27, r27
 85a:	66 27       	eor	r22, r22
 85c:	77 27       	eor	r23, r23
 85e:	cb 01       	movw	r24, r22
 860:	97 f9       	bld	r25, 7
 862:	08 95       	ret

00000864 <__gesf2>:
 864:	8a df       	rcall	.-236    	; 0x77a <__fp_cmp>
 866:	08 f4       	brcc	.+2      	; 0x86a <__gesf2+0x6>
 868:	8f ef       	ldi	r24, 0xFF	; 255
 86a:	08 95       	ret

0000086c <__mulsf3>:
 86c:	0b d0       	rcall	.+22     	; 0x884 <__mulsf3x>
 86e:	c0 cf       	rjmp	.-128    	; 0x7f0 <__fp_round>
 870:	b1 df       	rcall	.-158    	; 0x7d4 <__fp_pscA>
 872:	28 f0       	brcs	.+10     	; 0x87e <__mulsf3+0x12>
 874:	b6 df       	rcall	.-148    	; 0x7e2 <__fp_pscB>
 876:	18 f0       	brcs	.+6      	; 0x87e <__mulsf3+0x12>
 878:	95 23       	and	r25, r21
 87a:	09 f0       	breq	.+2      	; 0x87e <__mulsf3+0x12>
 87c:	a2 cf       	rjmp	.-188    	; 0x7c2 <__fp_inf>
 87e:	a7 cf       	rjmp	.-178    	; 0x7ce <__fp_nan>
 880:	11 24       	eor	r1, r1
 882:	ea cf       	rjmp	.-44     	; 0x858 <__fp_szero>

00000884 <__mulsf3x>:
 884:	c6 df       	rcall	.-116    	; 0x812 <__fp_split3>
 886:	a0 f3       	brcs	.-24     	; 0x870 <__mulsf3+0x4>

00000888 <__mulsf3_pse>:
 888:	95 9f       	mul	r25, r21
 88a:	d1 f3       	breq	.-12     	; 0x880 <__mulsf3+0x14>
 88c:	95 0f       	add	r25, r21
 88e:	50 e0       	ldi	r21, 0x00	; 0
 890:	55 1f       	adc	r21, r21
 892:	62 9f       	mul	r22, r18
 894:	f0 01       	movw	r30, r0
 896:	72 9f       	mul	r23, r18
 898:	bb 27       	eor	r27, r27
 89a:	f0 0d       	add	r31, r0
 89c:	b1 1d       	adc	r27, r1
 89e:	63 9f       	mul	r22, r19
 8a0:	aa 27       	eor	r26, r26
 8a2:	f0 0d       	add	r31, r0
 8a4:	b1 1d       	adc	r27, r1
 8a6:	aa 1f       	adc	r26, r26
 8a8:	64 9f       	mul	r22, r20
 8aa:	66 27       	eor	r22, r22
 8ac:	b0 0d       	add	r27, r0
 8ae:	a1 1d       	adc	r26, r1
 8b0:	66 1f       	adc	r22, r22
 8b2:	82 9f       	mul	r24, r18
 8b4:	22 27       	eor	r18, r18
 8b6:	b0 0d       	add	r27, r0
 8b8:	a1 1d       	adc	r26, r1
 8ba:	62 1f       	adc	r22, r18
 8bc:	73 9f       	mul	r23, r19
 8be:	b0 0d       	add	r27, r0
 8c0:	a1 1d       	adc	r26, r1
 8c2:	62 1f       	adc	r22, r18
 8c4:	83 9f       	mul	r24, r19
 8c6:	a0 0d       	add	r26, r0
 8c8:	61 1d       	adc	r22, r1
 8ca:	22 1f       	adc	r18, r18
 8cc:	74 9f       	mul	r23, r20
 8ce:	33 27       	eor	r19, r19
 8d0:	a0 0d       	add	r26, r0
 8d2:	61 1d       	adc	r22, r1
 8d4:	23 1f       	adc	r18, r19
 8d6:	84 9f       	mul	r24, r20
 8d8:	60 0d       	add	r22, r0
 8da:	21 1d       	adc	r18, r1
 8dc:	82 2f       	mov	r24, r18
 8de:	76 2f       	mov	r23, r22
 8e0:	6a 2f       	mov	r22, r26
 8e2:	11 24       	eor	r1, r1
 8e4:	9f 57       	subi	r25, 0x7F	; 127
 8e6:	50 40       	sbci	r21, 0x00	; 0
 8e8:	8a f0       	brmi	.+34     	; 0x90c <__mulsf3_pse+0x84>
 8ea:	e1 f0       	breq	.+56     	; 0x924 <__mulsf3_pse+0x9c>
 8ec:	88 23       	and	r24, r24
 8ee:	4a f0       	brmi	.+18     	; 0x902 <__mulsf3_pse+0x7a>
 8f0:	ee 0f       	add	r30, r30
 8f2:	ff 1f       	adc	r31, r31
 8f4:	bb 1f       	adc	r27, r27
 8f6:	66 1f       	adc	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	88 1f       	adc	r24, r24
 8fc:	91 50       	subi	r25, 0x01	; 1
 8fe:	50 40       	sbci	r21, 0x00	; 0
 900:	a9 f7       	brne	.-22     	; 0x8ec <__mulsf3_pse+0x64>
 902:	9e 3f       	cpi	r25, 0xFE	; 254
 904:	51 05       	cpc	r21, r1
 906:	70 f0       	brcs	.+28     	; 0x924 <__mulsf3_pse+0x9c>
 908:	5c cf       	rjmp	.-328    	; 0x7c2 <__fp_inf>
 90a:	a6 cf       	rjmp	.-180    	; 0x858 <__fp_szero>
 90c:	5f 3f       	cpi	r21, 0xFF	; 255
 90e:	ec f3       	brlt	.-6      	; 0x90a <__mulsf3_pse+0x82>
 910:	98 3e       	cpi	r25, 0xE8	; 232
 912:	dc f3       	brlt	.-10     	; 0x90a <__mulsf3_pse+0x82>
 914:	86 95       	lsr	r24
 916:	77 95       	ror	r23
 918:	67 95       	ror	r22
 91a:	b7 95       	ror	r27
 91c:	f7 95       	ror	r31
 91e:	e7 95       	ror	r30
 920:	9f 5f       	subi	r25, 0xFF	; 255
 922:	c1 f7       	brne	.-16     	; 0x914 <__mulsf3_pse+0x8c>
 924:	fe 2b       	or	r31, r30
 926:	88 0f       	add	r24, r24
 928:	91 1d       	adc	r25, r1
 92a:	96 95       	lsr	r25
 92c:	87 95       	ror	r24
 92e:	97 f9       	bld	r25, 7
 930:	08 95       	ret

00000932 <memcpy>:
 932:	fb 01       	movw	r30, r22
 934:	dc 01       	movw	r26, r24
 936:	02 c0       	rjmp	.+4      	; 0x93c <memcpy+0xa>
 938:	01 90       	ld	r0, Z+
 93a:	0d 92       	st	X+, r0
 93c:	41 50       	subi	r20, 0x01	; 1
 93e:	50 40       	sbci	r21, 0x00	; 0
 940:	d8 f7       	brcc	.-10     	; 0x938 <memcpy+0x6>
 942:	08 95       	ret

00000944 <_exit>:
 944:	f8 94       	cli

00000946 <__stop_program>:
 946:	ff cf       	rjmp	.-2      	; 0x946 <__stop_program>
