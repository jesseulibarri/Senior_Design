
bldc_atmel_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00000962  000009f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000962  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000628  00800300  00800300  00000bf6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001803  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb2  00000000  00000000  000025bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e66  00000000  00000000  00003471  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  000042d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008a6c  00000000  00000000  000046c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d5d  00000000  00000000  0000d12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000de89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000135b  00000000  00000000  0000df81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	6a c2       	rjmp	.+1236   	; 0x50e <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	13 e0       	ldi	r17, 0x03	; 3
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	29 e0       	ldi	r18, 0x09	; 9
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b3 e0       	ldi	r27, 0x03	; 3
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	84 d2       	rcall	.+1288   	; 0x5cc <main>
  c4:	4c c4       	rjmp	.+2200   	; 0x95e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <bldc_interface_init>:
 *
 * @param func
 * A function to be used when sending packets. Null (0) means that no packets will be sent.
 */
void bldc_interface_init(void(*func)(unsigned char *data, unsigned int len)) {
	send_func = func;
  c8:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <__data_end+0x1>
  cc:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
  d0:	08 95       	ret

000000d2 <bldc_interface_send_packet>:
 *
 * @param len
 * The data length.
 */
void bldc_interface_send_packet(unsigned char *data, unsigned int len) {
	if (send_func) {
  d2:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <__data_end>
  d6:	f0 91 01 03 	lds	r31, 0x0301	; 0x800301 <__data_end+0x1>
  da:	30 97       	sbiw	r30, 0x00	; 0
  dc:	09 f0       	breq	.+2      	; 0xe0 <bldc_interface_send_packet+0xe>
		send_func(data, len);
  de:	09 95       	icall
  e0:	08 95       	ret

000000e2 <bldc_interface_set_current>:
	}
}

// Setters
void bldc_interface_set_current(float current) {
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	00 d0       	rcall	.+0      	; 0xf0 <bldc_interface_set_current+0xe>
  f0:	00 d0       	rcall	.+0      	; 0xf2 <bldc_interface_set_current+0x10>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	ab 01       	movw	r20, r22
  f8:	bc 01       	movw	r22, r24
	int32_t send_index = 0;
	send_buffer[send_index++] = COMM_SET_CURRENT;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	89 83       	std	Y+1, r24	; 0x01
 104:	9a 83       	std	Y+2, r25	; 0x02
 106:	ab 83       	std	Y+3, r26	; 0x03
 108:	bc 83       	std	Y+4, r27	; 0x04
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <send_buffer>
	buffer_append_float32(send_buffer, current, 1000.0, &send_index);
 110:	ce 01       	movw	r24, r28
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	7c 01       	movw	r14, r24
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	2a e7       	ldi	r18, 0x7A	; 122
 11c:	34 e4       	ldi	r19, 0x44	; 68
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	93 e0       	ldi	r25, 0x03	; 3
 122:	75 d0       	rcall	.+234    	; 0x20e <buffer_append_float32>
	bldc_interface_send_packet(send_buffer, send_index);
 124:	69 81       	ldd	r22, Y+1	; 0x01
 126:	7a 81       	ldd	r23, Y+2	; 0x02
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	93 e0       	ldi	r25, 0x03	; 3
 12c:	d2 df       	rcall	.-92     	; 0xd2 <bldc_interface_send_packet>
}
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	08 95       	ret

00000144 <send_packet_bldc_interface>:
 * @param len
 * Data array length
 */
static void send_packet_bldc_interface(unsigned char *data, unsigned int len) {
	// Pass the packet to the packet handler to add checksum, length, start and stop bytes.
	packet_send_packet(data, len, PACKET_HANDLER);
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	a6 c0       	rjmp	.+332    	; 0x296 <packet_send_packet>
 14a:	08 95       	ret

0000014c <bldc_interface_uart_init>:
 * @param func
 * Function provided for sending packets.
 */
void bldc_interface_uart_init(void(*func)(unsigned char *data, unsigned int len)) {
	// Initialize packet handler
	packet_init(func, PACKET_HANDLER);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	94 d0       	rcall	.+296    	; 0x27a <packet_init>

	// Initialize the bldc interface and provide a send function
	bldc_interface_init(send_packet_bldc_interface);
 152:	82 ea       	ldi	r24, 0xA2	; 162
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	b8 cf       	rjmp	.-144    	; 0xc8 <bldc_interface_init>
 158:	08 95       	ret

0000015a <buffer_append_int32>:
	buffer[(*index)++] = number;
}

void buffer_append_float16(uint8_t* buffer, float number, float scale, int32_t *index) {
    buffer_append_int16(buffer, (int16_t)(number * scale), index);
}
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	f9 01       	movw	r30, r18
 168:	00 81       	ld	r16, Z
 16a:	11 81       	ldd	r17, Z+1	; 0x01
 16c:	22 81       	ldd	r18, Z+2	; 0x02
 16e:	33 81       	ldd	r19, Z+3	; 0x03
 170:	68 01       	movw	r12, r16
 172:	79 01       	movw	r14, r18
 174:	af ef       	ldi	r26, 0xFF	; 255
 176:	ca 1a       	sub	r12, r26
 178:	da 0a       	sbc	r13, r26
 17a:	ea 0a       	sbc	r14, r26
 17c:	fa 0a       	sbc	r15, r26
 17e:	c0 82       	st	Z, r12
 180:	d1 82       	std	Z+1, r13	; 0x01
 182:	e2 82       	std	Z+2, r14	; 0x02
 184:	f3 82       	std	Z+3, r15	; 0x03
 186:	dc 01       	movw	r26, r24
 188:	a0 0f       	add	r26, r16
 18a:	b1 1f       	adc	r27, r17
 18c:	7c 93       	st	X, r23
 18e:	00 81       	ld	r16, Z
 190:	11 81       	ldd	r17, Z+1	; 0x01
 192:	22 81       	ldd	r18, Z+2	; 0x02
 194:	33 81       	ldd	r19, Z+3	; 0x03
 196:	68 01       	movw	r12, r16
 198:	79 01       	movw	r14, r18
 19a:	7f ef       	ldi	r23, 0xFF	; 255
 19c:	c7 1a       	sub	r12, r23
 19e:	d7 0a       	sbc	r13, r23
 1a0:	e7 0a       	sbc	r14, r23
 1a2:	f7 0a       	sbc	r15, r23
 1a4:	c0 82       	st	Z, r12
 1a6:	d1 82       	std	Z+1, r13	; 0x01
 1a8:	e2 82       	std	Z+2, r14	; 0x02
 1aa:	f3 82       	std	Z+3, r15	; 0x03
 1ac:	dc 01       	movw	r26, r24
 1ae:	a0 0f       	add	r26, r16
 1b0:	b1 1f       	adc	r27, r17
 1b2:	6c 93       	st	X, r22
 1b4:	00 81       	ld	r16, Z
 1b6:	11 81       	ldd	r17, Z+1	; 0x01
 1b8:	22 81       	ldd	r18, Z+2	; 0x02
 1ba:	33 81       	ldd	r19, Z+3	; 0x03
 1bc:	68 01       	movw	r12, r16
 1be:	79 01       	movw	r14, r18
 1c0:	af ef       	ldi	r26, 0xFF	; 255
 1c2:	ca 1a       	sub	r12, r26
 1c4:	da 0a       	sbc	r13, r26
 1c6:	ea 0a       	sbc	r14, r26
 1c8:	fa 0a       	sbc	r15, r26
 1ca:	c0 82       	st	Z, r12
 1cc:	d1 82       	std	Z+1, r13	; 0x01
 1ce:	e2 82       	std	Z+2, r14	; 0x02
 1d0:	f3 82       	std	Z+3, r15	; 0x03
 1d2:	dc 01       	movw	r26, r24
 1d4:	a0 0f       	add	r26, r16
 1d6:	b1 1f       	adc	r27, r17
 1d8:	5c 93       	st	X, r21
 1da:	00 81       	ld	r16, Z
 1dc:	11 81       	ldd	r17, Z+1	; 0x01
 1de:	22 81       	ldd	r18, Z+2	; 0x02
 1e0:	33 81       	ldd	r19, Z+3	; 0x03
 1e2:	68 01       	movw	r12, r16
 1e4:	79 01       	movw	r14, r18
 1e6:	5f ef       	ldi	r21, 0xFF	; 255
 1e8:	c5 1a       	sub	r12, r21
 1ea:	d5 0a       	sbc	r13, r21
 1ec:	e5 0a       	sbc	r14, r21
 1ee:	f5 0a       	sbc	r15, r21
 1f0:	c0 82       	st	Z, r12
 1f2:	d1 82       	std	Z+1, r13	; 0x01
 1f4:	e2 82       	std	Z+2, r14	; 0x02
 1f6:	f3 82       	std	Z+3, r15	; 0x03
 1f8:	fc 01       	movw	r30, r24
 1fa:	e0 0f       	add	r30, r16
 1fc:	f1 1f       	adc	r31, r17
 1fe:	40 83       	st	Z, r20
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	df 90       	pop	r13
 20a:	cf 90       	pop	r12
 20c:	08 95       	ret

0000020e <buffer_append_float32>:

void buffer_append_float32(uint8_t* buffer, float number, float scale, int32_t *index) {
 20e:	ef 92       	push	r14
 210:	ff 92       	push	r15
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
 21c:	cb 01       	movw	r24, r22
 21e:	ba 01       	movw	r22, r20
    buffer_append_int32(buffer, (int32_t)(number * scale), index);
 220:	a9 01       	movw	r20, r18
 222:	98 01       	movw	r18, r16
 224:	30 d3       	rcall	.+1632   	; 0x886 <__mulsf3>
 226:	48 d2       	rcall	.+1168   	; 0x6b8 <__fixsfsi>
 228:	ab 01       	movw	r20, r22
 22a:	bc 01       	movw	r22, r24
 22c:	97 01       	movw	r18, r14
 22e:	ce 01       	movw	r24, r28
 230:	94 df       	rcall	.-216    	; 0x15a <buffer_append_int32>
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	08 95       	ret

00000240 <crc16>:
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
	for (i = 0; i < len; i++) {
 240:	61 15       	cp	r22, r1
 242:	71 05       	cpc	r23, r1
 244:	b9 f0       	breq	.+46     	; 0x274 <crc16+0x34>
 246:	dc 01       	movw	r26, r24
 248:	68 0f       	add	r22, r24
 24a:	79 1f       	adc	r23, r25
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 250:	2d 91       	ld	r18, X+
 252:	e9 2f       	mov	r30, r25
 254:	ff 27       	eor	r31, r31
 256:	e2 27       	eor	r30, r18
 258:	ee 0f       	add	r30, r30
 25a:	ff 1f       	adc	r31, r31
 25c:	e0 50       	subi	r30, 0x00	; 0
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	20 81       	ld	r18, Z
 262:	31 81       	ldd	r19, Z+1	; 0x01
 264:	98 2f       	mov	r25, r24
 266:	88 27       	eor	r24, r24
 268:	82 27       	eor	r24, r18
 26a:	93 27       	eor	r25, r19
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
	for (i = 0; i < len; i++) {
 26c:	a6 17       	cp	r26, r22
 26e:	b7 07       	cpc	r27, r23
 270:	79 f7       	brne	.-34     	; 0x250 <crc16+0x10>
 272:	08 95       	ret
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
	for (i = 0; i < len; i++) {
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
	}
	return cksum;
}
 278:	08 95       	ret

0000027a <packet_init>:
} PACKET_STATE_t;

static PACKET_STATE_t handler_states[PACKET_HANDLERS];

void packet_init(void (*s_func)(unsigned char *data, unsigned int len), int handler_num) {
	handler_states[handler_num].send_func = s_func;
 27a:	20 e1       	ldi	r18, 0x10	; 16
 27c:	34 e0       	ldi	r19, 0x04	; 4
 27e:	62 9f       	mul	r22, r18
 280:	f0 01       	movw	r30, r0
 282:	63 9f       	mul	r22, r19
 284:	f0 0d       	add	r31, r0
 286:	72 9f       	mul	r23, r18
 288:	f0 0d       	add	r31, r0
 28a:	11 24       	eor	r1, r1
 28c:	ee 5f       	subi	r30, 0xFE	; 254
 28e:	fa 4f       	sbci	r31, 0xFA	; 250
 290:	93 83       	std	Z+3, r25	; 0x03
 292:	82 83       	std	Z+2, r24	; 0x02
 294:	08 95       	ret

00000296 <packet_send_packet>:
}

void packet_send_packet(unsigned char *data, unsigned int len, int handler_num) {
 296:	af 92       	push	r10
 298:	bf 92       	push	r11
 29a:	cf 92       	push	r12
 29c:	df 92       	push	r13
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	5c 01       	movw	r10, r24
 2ac:	eb 01       	movw	r28, r22
	if (len > PACKET_MAX_PL_LEN) {
 2ae:	61 30       	cpi	r22, 0x01	; 1
 2b0:	22 e0       	ldi	r18, 0x02	; 2
 2b2:	72 07       	cpc	r23, r18
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <packet_send_packet+0x22>
 2b6:	5f c0       	rjmp	.+190    	; 0x376 <packet_send_packet+0xe0>
		return;
	}

	int b_ind = 0;

	if (len <= 256) {
 2b8:	61 30       	cpi	r22, 0x01	; 1
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	78 07       	cpc	r23, r24
 2be:	a8 f4       	brcc	.+42     	; 0x2ea <packet_send_packet+0x54>
		handler_states[handler_num].tx_buffer[b_ind++] = 2;
 2c0:	20 e1       	ldi	r18, 0x10	; 16
 2c2:	34 e0       	ldi	r19, 0x04	; 4
 2c4:	42 9f       	mul	r20, r18
 2c6:	c0 01       	movw	r24, r0
 2c8:	43 9f       	mul	r20, r19
 2ca:	90 0d       	add	r25, r0
 2cc:	52 9f       	mul	r21, r18
 2ce:	90 0d       	add	r25, r0
 2d0:	11 24       	eor	r1, r1
 2d2:	8e 5f       	subi	r24, 0xFE	; 254
 2d4:	9a 4f       	sbci	r25, 0xFA	; 250
 2d6:	fc 01       	movw	r30, r24
 2d8:	ea 5f       	subi	r30, 0xFA	; 250
 2da:	fd 4f       	sbci	r31, 0xFD	; 253
 2dc:	22 e0       	ldi	r18, 0x02	; 2
 2de:	20 83       	st	Z, r18
		handler_states[handler_num].tx_buffer[b_ind++] = len;
 2e0:	31 96       	adiw	r30, 0x01	; 1
 2e2:	60 83       	st	Z, r22
 2e4:	02 e0       	ldi	r16, 0x02	; 2
 2e6:	10 e0       	ldi	r17, 0x00	; 0
 2e8:	16 c0       	rjmp	.+44     	; 0x316 <packet_send_packet+0x80>
	} else {
		handler_states[handler_num].tx_buffer[b_ind++] = 3;
 2ea:	20 e1       	ldi	r18, 0x10	; 16
 2ec:	34 e0       	ldi	r19, 0x04	; 4
 2ee:	42 9f       	mul	r20, r18
 2f0:	c0 01       	movw	r24, r0
 2f2:	43 9f       	mul	r20, r19
 2f4:	90 0d       	add	r25, r0
 2f6:	52 9f       	mul	r21, r18
 2f8:	90 0d       	add	r25, r0
 2fa:	11 24       	eor	r1, r1
 2fc:	8e 5f       	subi	r24, 0xFE	; 254
 2fe:	9a 4f       	sbci	r25, 0xFA	; 250
 300:	fc 01       	movw	r30, r24
 302:	ea 5f       	subi	r30, 0xFA	; 250
 304:	fd 4f       	sbci	r31, 0xFD	; 253
 306:	23 e0       	ldi	r18, 0x03	; 3
 308:	20 83       	st	Z, r18
		handler_states[handler_num].tx_buffer[b_ind++] = len >> 8;
 30a:	31 96       	adiw	r30, 0x01	; 1
 30c:	d0 83       	st	Z, r29
		handler_states[handler_num].tx_buffer[b_ind++] = len & 0xFF;
 30e:	31 96       	adiw	r30, 0x01	; 1
 310:	60 83       	st	Z, r22
 312:	03 e0       	ldi	r16, 0x03	; 3
 314:	10 e0       	ldi	r17, 0x00	; 0
	}

	memcpy(handler_states[handler_num].tx_buffer + b_ind, data, len);
 316:	80 e1       	ldi	r24, 0x10	; 16
 318:	94 e0       	ldi	r25, 0x04	; 4
 31a:	48 9f       	mul	r20, r24
 31c:	70 01       	movw	r14, r0
 31e:	49 9f       	mul	r20, r25
 320:	f0 0c       	add	r15, r0
 322:	58 9f       	mul	r21, r24
 324:	f0 0c       	add	r15, r0
 326:	11 24       	eor	r1, r1
 328:	c7 01       	movw	r24, r14
 32a:	88 5f       	subi	r24, 0xF8	; 248
 32c:	98 4f       	sbci	r25, 0xF8	; 248
 32e:	6c 01       	movw	r12, r24
 330:	ae 01       	movw	r20, r28
 332:	b5 01       	movw	r22, r10
 334:	80 0f       	add	r24, r16
 336:	91 1f       	adc	r25, r17
 338:	09 d3       	rcall	.+1554   	; 0x94c <memcpy>
	b_ind += len;
 33a:	0c 0f       	add	r16, r28
 33c:	1d 1f       	adc	r17, r29

	unsigned short crc = crc16(data, len);
 33e:	be 01       	movw	r22, r28
 340:	c5 01       	movw	r24, r10
 342:	7e df       	rcall	.-260    	; 0x240 <crc16>
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 344:	f7 01       	movw	r30, r14
 346:	ee 5f       	subi	r30, 0xFE	; 254
 348:	fa 4f       	sbci	r31, 0xFA	; 250
 34a:	9f 01       	movw	r18, r30
 34c:	20 0f       	add	r18, r16
 34e:	31 1f       	adc	r19, r17
 350:	d9 01       	movw	r26, r18
 352:	aa 5f       	subi	r26, 0xFA	; 250
 354:	bd 4f       	sbci	r27, 0xFD	; 253
 356:	9c 93       	st	X, r25
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
 358:	11 96       	adiw	r26, 0x01	; 1
 35a:	8c 93       	st	X, r24
	handler_states[handler_num].tx_buffer[b_ind++] = 3;
 35c:	b8 01       	movw	r22, r16
 35e:	6d 5f       	subi	r22, 0xFD	; 253
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	11 96       	adiw	r26, 0x01	; 1
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	8c 93       	st	X, r24

	if (handler_states[handler_num].send_func) {
 368:	02 80       	ldd	r0, Z+2	; 0x02
 36a:	f3 81       	ldd	r31, Z+3	; 0x03
 36c:	e0 2d       	mov	r30, r0
 36e:	30 97       	sbiw	r30, 0x00	; 0
 370:	11 f0       	breq	.+4      	; 0x376 <packet_send_packet+0xe0>
		handler_states[handler_num].send_func(handler_states[handler_num].tx_buffer, b_ind);
 372:	c6 01       	movw	r24, r12
 374:	09 95       	icall
	}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	df 90       	pop	r13
 384:	cf 90       	pop	r12
 386:	bf 90       	pop	r11
 388:	af 90       	pop	r10
 38a:	08 95       	ret

0000038c <send_packet>:
    DDRD |= (1<<PD0);   //SPI SS pin
    DDRD &= ~(1<<PD7)|(1<<PD6);  //Configure Port D Pin 7, 6 for input
    PORTD |= (1<<PD7);  //enable pullup
    timer1_init();      //initialize 16 bit timer
    uart_init(MYUBBR);	//initialize uart
    sei();
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	9c 01       	movw	r18, r24
 392:	eb e9       	ldi	r30, 0x9B	; 155
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	90 81       	ld	r25, Z
 398:	95 ff       	sbrs	r25, 5
 39a:	fd cf       	rjmp	.-6      	; 0x396 <send_packet+0xa>
 39c:	61 15       	cp	r22, r1
 39e:	71 05       	cpc	r23, r1
 3a0:	99 f0       	breq	.+38     	; 0x3c8 <send_packet+0x3c>
 3a2:	d9 01       	movw	r26, r18
 3a4:	62 0f       	add	r22, r18
 3a6:	73 1f       	adc	r23, r19
 3a8:	cc e9       	ldi	r28, 0x9C	; 156
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
 3ac:	eb e9       	ldi	r30, 0x9B	; 155
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	9d 91       	ld	r25, X+
 3b2:	98 83       	st	Y, r25
 3b4:	90 81       	ld	r25, Z
 3b6:	95 ff       	sbrs	r25, 5
 3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <send_packet+0x28>
 3ba:	81 e2       	ldi	r24, 0x21	; 33
 3bc:	8a 95       	dec	r24
 3be:	f1 f7       	brne	.-4      	; 0x3bc <send_packet+0x30>
 3c0:	00 00       	nop
 3c2:	a6 17       	cp	r26, r22
 3c4:	b7 07       	cpc	r27, r23
 3c6:	a1 f7       	brne	.-24     	; 0x3b0 <send_packet+0x24>
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <timer1_init>:
 3ce:	8f b5       	in	r24, 0x2f	; 47
 3d0:	83 60       	ori	r24, 0x03	; 3
 3d2:	8f bd       	out	0x2f, r24	; 47
 3d4:	8e b5       	in	r24, 0x2e	; 46
 3d6:	88 61       	ori	r24, 0x18	; 24
 3d8:	8e bd       	out	0x2e, r24	; 46
 3da:	8e b5       	in	r24, 0x2e	; 46
 3dc:	83 60       	ori	r24, 0x03	; 3
 3de:	8e bd       	out	0x2e, r24	; 46
 3e0:	87 ea       	ldi	r24, 0xA7	; 167
 3e2:	91 e6       	ldi	r25, 0x61	; 97
 3e4:	9b bd       	out	0x2b, r25	; 43
 3e6:	8a bd       	out	0x2a, r24	; 42
 3e8:	87 b7       	in	r24, 0x37	; 55
 3ea:	84 60       	ori	r24, 0x04	; 4
 3ec:	87 bf       	out	0x37, r24	; 55
 3ee:	08 95       	ret

000003f0 <motor_torque>:
 3f0:	8f 92       	push	r8
 3f2:	9f 92       	push	r9
 3f4:	af 92       	push	r10
 3f6:	bf 92       	push	r11
 3f8:	cf 92       	push	r12
 3fa:	df 92       	push	r13
 3fc:	ef 92       	push	r14
 3fe:	ff 92       	push	r15
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	7c 01       	movw	r14, r24
 408:	6b 01       	movw	r12, r22
 40a:	8a 01       	movw	r16, r20
 40c:	c0 b3       	in	r28, 0x10	; 16
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	5f e3       	ldi	r21, 0x3F	; 63
 416:	60 91 12 09 	lds	r22, 0x0912	; 0x800912 <general_torque.2282>
 41a:	70 91 13 09 	lds	r23, 0x0913	; 0x800913 <general_torque.2282+0x1>
 41e:	80 91 14 09 	lds	r24, 0x0914	; 0x800914 <general_torque.2282+0x2>
 422:	90 91 15 09 	lds	r25, 0x0915	; 0x800915 <general_torque.2282+0x3>
 426:	e0 d0       	rcall	.+448    	; 0x5e8 <__addsf3>
 428:	60 93 12 09 	sts	0x0912, r22	; 0x800912 <general_torque.2282>
 42c:	70 93 13 09 	sts	0x0913, r23	; 0x800913 <general_torque.2282+0x1>
 430:	80 93 14 09 	sts	0x0914, r24	; 0x800914 <general_torque.2282+0x2>
 434:	90 93 15 09 	sts	0x0915, r25	; 0x800915 <general_torque.2282+0x3>
 438:	f8 01       	movw	r30, r16
 43a:	11 82       	std	Z+1, r1	; 0x01
 43c:	10 82       	st	Z, r1
 43e:	2c 2f       	mov	r18, r28
 440:	2f 67       	ori	r18, 0x7F	; 127
 442:	23 30       	cpi	r18, 0x03	; 3
 444:	09 f4       	brne	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 446:	4a c0       	rjmp	.+148    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 448:	2f 37       	cpi	r18, 0x7F	; 127
 44a:	19 f0       	breq	.+6      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44c:	21 11       	cpse	r18, r1
 44e:	2e c0       	rjmp	.+92     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 450:	45 c0       	rjmp	.+138    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	48 ec       	ldi	r20, 0xC8	; 200
 458:	51 e4       	ldi	r21, 0x41	; 65
 45a:	11 d2       	rcall	.+1058   	; 0x87e <__gesf2>
 45c:	18 16       	cp	r1, r24
 45e:	64 f4       	brge	.+24     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	a8 ec       	ldi	r26, 0xC8	; 200
 466:	b1 e4       	ldi	r27, 0x41	; 65
 468:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <general_torque.2282>
 46c:	90 93 13 09 	sts	0x0913, r25	; 0x800913 <general_torque.2282+0x1>
 470:	a0 93 14 09 	sts	0x0914, r26	; 0x800914 <general_torque.2282+0x2>
 474:	b0 93 15 09 	sts	0x0915, r27	; 0x800915 <general_torque.2282+0x3>
 478:	80 90 12 09 	lds	r8, 0x0912	; 0x800912 <general_torque.2282>
 47c:	90 90 13 09 	lds	r9, 0x0913	; 0x800913 <general_torque.2282+0x1>
 480:	a0 90 14 09 	lds	r10, 0x0914	; 0x800914 <general_torque.2282+0x2>
 484:	b0 90 15 09 	lds	r11, 0x0915	; 0x800915 <general_torque.2282+0x3>
 488:	26 ea       	ldi	r18, 0xA6	; 166
 48a:	3d ee       	ldi	r19, 0xED	; 237
 48c:	4f e7       	ldi	r20, 0x7F	; 127
 48e:	5f e3       	ldi	r21, 0x3F	; 63
 490:	c5 01       	movw	r24, r10
 492:	b4 01       	movw	r22, r8
 494:	f8 d1       	rcall	.+1008   	; 0x886 <__mulsf3>
 496:	f7 01       	movw	r30, r14
 498:	60 83       	st	Z, r22
 49a:	71 83       	std	Z+1, r23	; 0x01
 49c:	82 83       	std	Z+2, r24	; 0x02
 49e:	93 83       	std	Z+3, r25	; 0x03
 4a0:	f6 01       	movw	r30, r12
 4a2:	80 82       	st	Z, r8
 4a4:	91 82       	std	Z+1, r9	; 0x01
 4a6:	a2 82       	std	Z+2, r10	; 0x02
 4a8:	b3 82       	std	Z+3, r11	; 0x03
 4aa:	18 c0       	rjmp	.+48     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	a9 01       	movw	r20, r18
 4b2:	fe d0       	rcall	.+508    	; 0x6b0 <__cmpsf2>
 4b4:	88 23       	and	r24, r24
 4b6:	91 f0       	breq	.+36     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4b8:	10 92 12 09 	sts	0x0912, r1	; 0x800912 <general_torque.2282>
 4bc:	10 92 13 09 	sts	0x0913, r1	; 0x800913 <general_torque.2282+0x1>
 4c0:	10 92 14 09 	sts	0x0914, r1	; 0x800914 <general_torque.2282+0x2>
 4c4:	10 92 15 09 	sts	0x0915, r1	; 0x800915 <general_torque.2282+0x3>
 4c8:	f6 01       	movw	r30, r12
 4ca:	10 82       	st	Z, r1
 4cc:	11 82       	std	Z+1, r1	; 0x01
 4ce:	12 82       	std	Z+2, r1	; 0x02
 4d0:	13 82       	std	Z+3, r1	; 0x03
 4d2:	f7 01       	movw	r30, r14
 4d4:	10 82       	st	Z, r1
 4d6:	11 82       	std	Z+1, r1	; 0x01
 4d8:	12 82       	std	Z+2, r1	; 0x02
 4da:	13 82       	std	Z+3, r1	; 0x03
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	ff 90       	pop	r15
 4e4:	ef 90       	pop	r14
 4e6:	df 90       	pop	r13
 4e8:	cf 90       	pop	r12
 4ea:	bf 90       	pop	r11
 4ec:	af 90       	pop	r10
 4ee:	9f 90       	pop	r9
 4f0:	8f 90       	pop	r8
 4f2:	08 95       	ret

000004f4 <uart_init>:
 4f4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 4f8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 4fc:	88 e1       	ldi	r24, 0x18	; 24
 4fe:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 502:	ed e9       	ldi	r30, 0x9D	; 157
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	8e 60       	ori	r24, 0x0E	; 14
 50a:	80 83       	st	Z, r24
 50c:	08 95       	ret

0000050e <__vector_14>:
}//program_init

/************************************************************************************************
 * Name: ISR for 16-bit timer
 ************************************************************************************************/
ISR(TIMER1_OVF_vect){
 50e:	1f 92       	push	r1
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	0f 92       	push	r0
 516:	11 24       	eor	r1, r1
 518:	0b b6       	in	r0, 0x3b	; 59
 51a:	0f 92       	push	r0
 51c:	2f 93       	push	r18
 51e:	3f 93       	push	r19
 520:	4f 93       	push	r20
 522:	5f 93       	push	r21
 524:	6f 93       	push	r22
 526:	7f 93       	push	r23
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	af 93       	push	r26
 52e:	bf 93       	push	r27
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	ef 93       	push	r30
 536:	ff 93       	push	r31
	
	bldc_interface_uart_init(send_packet);
 538:	86 ec       	ldi	r24, 0xC6	; 198
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	07 de       	rcall	.-1010   	; 0x14c <bldc_interface_uart_init>
		
	//ISR for the 16 bit timer
    PORTB ^= (1<<PB7);
 53e:	88 b3       	in	r24, 0x18	; 24
 540:	80 58       	subi	r24, 0x80	; 128
 542:	88 bb       	out	0x18, r24	; 24
    PORTF |= (1<<PF0);
 544:	c2 e6       	ldi	r28, 0x62	; 98
 546:	d0 e0       	ldi	r29, 0x00	; 0
 548:	88 81       	ld	r24, Y
 54a:	81 60       	ori	r24, 0x01	; 1
 54c:	88 83       	st	Y, r24
    motor_torque(&torque_right, &torque_left, &steering_angle);	//Update motor torques
 54e:	4a e1       	ldi	r20, 0x1A	; 26
 550:	59 e0       	ldi	r21, 0x09	; 9
 552:	6c e1       	ldi	r22, 0x1C	; 28
 554:	79 e0       	ldi	r23, 0x09	; 9
 556:	80 e2       	ldi	r24, 0x20	; 32
 558:	99 e0       	ldi	r25, 0x09	; 9
 55a:	4a df       	rcall	.-364    	; 0x3f0 <motor_torque>
    steering_angle_float = (float)steering_angle;
 55c:	60 91 1a 09 	lds	r22, 0x091A	; 0x80091a <steering_angle>
 560:	70 91 1b 09 	lds	r23, 0x091B	; 0x80091b <steering_angle+0x1>
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	d8 d0       	rcall	.+432    	; 0x71a <__floatunsisf>
 56a:	60 93 16 09 	sts	0x0916, r22	; 0x800916 <steering_angle_float>
 56e:	70 93 17 09 	sts	0x0917, r23	; 0x800917 <steering_angle_float+0x1>
 572:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <steering_angle_float+0x2>
 576:	90 93 19 09 	sts	0x0919, r25	; 0x800919 <steering_angle_float+0x3>

    //float_to_bytes(&torque_right, torque_r_bytes);
    //float_to_bytes(&torque_left, torque_l_bytes);
    //float_to_bytes(&steering_angle_float, steering_angle_bytes);

	setcurrent = torque_right;
 57a:	60 91 20 09 	lds	r22, 0x0920	; 0x800920 <torque_right>
 57e:	70 91 21 09 	lds	r23, 0x0921	; 0x800921 <torque_right+0x1>
 582:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <torque_right+0x2>
 586:	90 91 23 09 	lds	r25, 0x0923	; 0x800923 <torque_right+0x3>
 58a:	60 93 24 09 	sts	0x0924, r22	; 0x800924 <setcurrent>
 58e:	70 93 25 09 	sts	0x0925, r23	; 0x800925 <setcurrent+0x1>
 592:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <setcurrent+0x2>
 596:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <setcurrent+0x3>
    bldc_interface_set_current(setcurrent);
 59a:	a3 dd       	rcall	.-1210   	; 0xe2 <bldc_interface_set_current>
    //uart_transmit(torque_r_bytes,4);		//transmit right torque value - float, 4 bytes
    //uart_transmit(torque_l_bytes,4);    		//transmit left torque value - float, 4 bytes
    //uart_transmit(steering_angle_bytes,4);		//transmit steering encoder value - uint16, 2 bytes

//    spi_init();					//Used to initalize SPI for LCD screen if being used
    PORTF &= ~(1<<PF0);
 59c:	88 81       	ld	r24, Y
 59e:	8e 7f       	andi	r24, 0xFE	; 254
 5a0:	88 83       	st	Y, r24
}//timer1_isr
 5a2:	ff 91       	pop	r31
 5a4:	ef 91       	pop	r30
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	bf 91       	pop	r27
 5ac:	af 91       	pop	r26
 5ae:	9f 91       	pop	r25
 5b0:	8f 91       	pop	r24
 5b2:	7f 91       	pop	r23
 5b4:	6f 91       	pop	r22
 5b6:	5f 91       	pop	r21
 5b8:	4f 91       	pop	r20
 5ba:	3f 91       	pop	r19
 5bc:	2f 91       	pop	r18
 5be:	0f 90       	pop	r0
 5c0:	0b be       	out	0x3b, r0	; 59
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <main>:
/************************************************************************************************
 * Name: Main program, initialize all required ports, timers and UART. Loop infinitely.
 ************************************************************************************************/
int main(){
	
    DDRB |= (1<<PB7)|(1<<PB6)|(1<<PB5)|(1<<PB4);
 5cc:	87 b3       	in	r24, 0x17	; 23
 5ce:	80 6f       	ori	r24, 0xF0	; 240
 5d0:	87 bb       	out	0x17, r24	; 23
    DDRF = 0xFF;
 5d2:	8f ef       	ldi	r24, 0xFF	; 255
 5d4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    //DDRD |= (1<<PD0);   //SPI SS pin
    DDRD &= ~(1<<PD7)|(1<<PD6);  //Configure Port D Pin 7, 6 for input
 5d8:	8f 98       	cbi	0x11, 7	; 17
    PORTD |= (1<<PD7);  //enable pull up
 5da:	97 9a       	sbi	0x12, 7	; 18
    timer1_init();      //initialize 16 bit timer
 5dc:	f8 de       	rcall	.-528    	; 0x3ce <timer1_init>
    uart_init(MYUBBR);	//initialize uart
 5de:	8c e0       	ldi	r24, 0x0C	; 12
 5e0:	89 df       	rcall	.-238    	; 0x4f4 <uart_init>
    sei();
 5e2:	78 94       	sei

    while(1){
    }//while
 5e4:	ff cf       	rjmp	.-2      	; 0x5e4 <main+0x18>

000005e6 <__subsf3>:
 5e6:	50 58       	subi	r21, 0x80	; 128

000005e8 <__addsf3>:
 5e8:	bb 27       	eor	r27, r27
 5ea:	aa 27       	eor	r26, r26
 5ec:	0e d0       	rcall	.+28     	; 0x60a <__addsf3x>
 5ee:	0d c1       	rjmp	.+538    	; 0x80a <__fp_round>
 5f0:	fe d0       	rcall	.+508    	; 0x7ee <__fp_pscA>
 5f2:	30 f0       	brcs	.+12     	; 0x600 <__addsf3+0x18>
 5f4:	03 d1       	rcall	.+518    	; 0x7fc <__fp_pscB>
 5f6:	20 f0       	brcs	.+8      	; 0x600 <__addsf3+0x18>
 5f8:	31 f4       	brne	.+12     	; 0x606 <__addsf3+0x1e>
 5fa:	9f 3f       	cpi	r25, 0xFF	; 255
 5fc:	11 f4       	brne	.+4      	; 0x602 <__addsf3+0x1a>
 5fe:	1e f4       	brtc	.+6      	; 0x606 <__addsf3+0x1e>
 600:	f3 c0       	rjmp	.+486    	; 0x7e8 <__fp_nan>
 602:	0e f4       	brtc	.+2      	; 0x606 <__addsf3+0x1e>
 604:	e0 95       	com	r30
 606:	e7 fb       	bst	r30, 7
 608:	e9 c0       	rjmp	.+466    	; 0x7dc <__fp_inf>

0000060a <__addsf3x>:
 60a:	e9 2f       	mov	r30, r25
 60c:	0f d1       	rcall	.+542    	; 0x82c <__fp_split3>
 60e:	80 f3       	brcs	.-32     	; 0x5f0 <__addsf3+0x8>
 610:	ba 17       	cp	r27, r26
 612:	62 07       	cpc	r22, r18
 614:	73 07       	cpc	r23, r19
 616:	84 07       	cpc	r24, r20
 618:	95 07       	cpc	r25, r21
 61a:	18 f0       	brcs	.+6      	; 0x622 <__addsf3x+0x18>
 61c:	71 f4       	brne	.+28     	; 0x63a <__addsf3x+0x30>
 61e:	9e f5       	brtc	.+102    	; 0x686 <__addsf3x+0x7c>
 620:	27 c1       	rjmp	.+590    	; 0x870 <__fp_zero>
 622:	0e f4       	brtc	.+2      	; 0x626 <__addsf3x+0x1c>
 624:	e0 95       	com	r30
 626:	0b 2e       	mov	r0, r27
 628:	ba 2f       	mov	r27, r26
 62a:	a0 2d       	mov	r26, r0
 62c:	0b 01       	movw	r0, r22
 62e:	b9 01       	movw	r22, r18
 630:	90 01       	movw	r18, r0
 632:	0c 01       	movw	r0, r24
 634:	ca 01       	movw	r24, r20
 636:	a0 01       	movw	r20, r0
 638:	11 24       	eor	r1, r1
 63a:	ff 27       	eor	r31, r31
 63c:	59 1b       	sub	r21, r25
 63e:	99 f0       	breq	.+38     	; 0x666 <__addsf3x+0x5c>
 640:	59 3f       	cpi	r21, 0xF9	; 249
 642:	50 f4       	brcc	.+20     	; 0x658 <__addsf3x+0x4e>
 644:	50 3e       	cpi	r21, 0xE0	; 224
 646:	68 f1       	brcs	.+90     	; 0x6a2 <__addsf3x+0x98>
 648:	1a 16       	cp	r1, r26
 64a:	f0 40       	sbci	r31, 0x00	; 0
 64c:	a2 2f       	mov	r26, r18
 64e:	23 2f       	mov	r18, r19
 650:	34 2f       	mov	r19, r20
 652:	44 27       	eor	r20, r20
 654:	58 5f       	subi	r21, 0xF8	; 248
 656:	f3 cf       	rjmp	.-26     	; 0x63e <__addsf3x+0x34>
 658:	46 95       	lsr	r20
 65a:	37 95       	ror	r19
 65c:	27 95       	ror	r18
 65e:	a7 95       	ror	r26
 660:	f0 40       	sbci	r31, 0x00	; 0
 662:	53 95       	inc	r21
 664:	c9 f7       	brne	.-14     	; 0x658 <__addsf3x+0x4e>
 666:	7e f4       	brtc	.+30     	; 0x686 <__addsf3x+0x7c>
 668:	1f 16       	cp	r1, r31
 66a:	ba 0b       	sbc	r27, r26
 66c:	62 0b       	sbc	r22, r18
 66e:	73 0b       	sbc	r23, r19
 670:	84 0b       	sbc	r24, r20
 672:	ba f0       	brmi	.+46     	; 0x6a2 <__addsf3x+0x98>
 674:	91 50       	subi	r25, 0x01	; 1
 676:	a1 f0       	breq	.+40     	; 0x6a0 <__addsf3x+0x96>
 678:	ff 0f       	add	r31, r31
 67a:	bb 1f       	adc	r27, r27
 67c:	66 1f       	adc	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	c2 f7       	brpl	.-16     	; 0x674 <__addsf3x+0x6a>
 684:	0e c0       	rjmp	.+28     	; 0x6a2 <__addsf3x+0x98>
 686:	ba 0f       	add	r27, r26
 688:	62 1f       	adc	r22, r18
 68a:	73 1f       	adc	r23, r19
 68c:	84 1f       	adc	r24, r20
 68e:	48 f4       	brcc	.+18     	; 0x6a2 <__addsf3x+0x98>
 690:	87 95       	ror	r24
 692:	77 95       	ror	r23
 694:	67 95       	ror	r22
 696:	b7 95       	ror	r27
 698:	f7 95       	ror	r31
 69a:	9e 3f       	cpi	r25, 0xFE	; 254
 69c:	08 f0       	brcs	.+2      	; 0x6a0 <__addsf3x+0x96>
 69e:	b3 cf       	rjmp	.-154    	; 0x606 <__addsf3+0x1e>
 6a0:	93 95       	inc	r25
 6a2:	88 0f       	add	r24, r24
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <__addsf3x+0x9e>
 6a6:	99 27       	eor	r25, r25
 6a8:	ee 0f       	add	r30, r30
 6aa:	97 95       	ror	r25
 6ac:	87 95       	ror	r24
 6ae:	08 95       	ret

000006b0 <__cmpsf2>:
 6b0:	71 d0       	rcall	.+226    	; 0x794 <__fp_cmp>
 6b2:	08 f4       	brcc	.+2      	; 0x6b6 <__cmpsf2+0x6>
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	08 95       	ret

000006b8 <__fixsfsi>:
 6b8:	04 d0       	rcall	.+8      	; 0x6c2 <__fixunssfsi>
 6ba:	68 94       	set
 6bc:	b1 11       	cpse	r27, r1
 6be:	d9 c0       	rjmp	.+434    	; 0x872 <__fp_szero>
 6c0:	08 95       	ret

000006c2 <__fixunssfsi>:
 6c2:	bc d0       	rcall	.+376    	; 0x83c <__fp_splitA>
 6c4:	88 f0       	brcs	.+34     	; 0x6e8 <__fixunssfsi+0x26>
 6c6:	9f 57       	subi	r25, 0x7F	; 127
 6c8:	90 f0       	brcs	.+36     	; 0x6ee <__fixunssfsi+0x2c>
 6ca:	b9 2f       	mov	r27, r25
 6cc:	99 27       	eor	r25, r25
 6ce:	b7 51       	subi	r27, 0x17	; 23
 6d0:	a0 f0       	brcs	.+40     	; 0x6fa <__fixunssfsi+0x38>
 6d2:	d1 f0       	breq	.+52     	; 0x708 <__fixunssfsi+0x46>
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	1a f0       	brmi	.+6      	; 0x6e4 <__fixunssfsi+0x22>
 6de:	ba 95       	dec	r27
 6e0:	c9 f7       	brne	.-14     	; 0x6d4 <__fixunssfsi+0x12>
 6e2:	12 c0       	rjmp	.+36     	; 0x708 <__fixunssfsi+0x46>
 6e4:	b1 30       	cpi	r27, 0x01	; 1
 6e6:	81 f0       	breq	.+32     	; 0x708 <__fixunssfsi+0x46>
 6e8:	c3 d0       	rcall	.+390    	; 0x870 <__fp_zero>
 6ea:	b1 e0       	ldi	r27, 0x01	; 1
 6ec:	08 95       	ret
 6ee:	c0 c0       	rjmp	.+384    	; 0x870 <__fp_zero>
 6f0:	67 2f       	mov	r22, r23
 6f2:	78 2f       	mov	r23, r24
 6f4:	88 27       	eor	r24, r24
 6f6:	b8 5f       	subi	r27, 0xF8	; 248
 6f8:	39 f0       	breq	.+14     	; 0x708 <__fixunssfsi+0x46>
 6fa:	b9 3f       	cpi	r27, 0xF9	; 249
 6fc:	cc f3       	brlt	.-14     	; 0x6f0 <__fixunssfsi+0x2e>
 6fe:	86 95       	lsr	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b3 95       	inc	r27
 706:	d9 f7       	brne	.-10     	; 0x6fe <__fixunssfsi+0x3c>
 708:	3e f4       	brtc	.+14     	; 0x718 <__fixunssfsi+0x56>
 70a:	90 95       	com	r25
 70c:	80 95       	com	r24
 70e:	70 95       	com	r23
 710:	61 95       	neg	r22
 712:	7f 4f       	sbci	r23, 0xFF	; 255
 714:	8f 4f       	sbci	r24, 0xFF	; 255
 716:	9f 4f       	sbci	r25, 0xFF	; 255
 718:	08 95       	ret

0000071a <__floatunsisf>:
 71a:	e8 94       	clt
 71c:	09 c0       	rjmp	.+18     	; 0x730 <__floatsisf+0x12>

0000071e <__floatsisf>:
 71e:	97 fb       	bst	r25, 7
 720:	3e f4       	brtc	.+14     	; 0x730 <__floatsisf+0x12>
 722:	90 95       	com	r25
 724:	80 95       	com	r24
 726:	70 95       	com	r23
 728:	61 95       	neg	r22
 72a:	7f 4f       	sbci	r23, 0xFF	; 255
 72c:	8f 4f       	sbci	r24, 0xFF	; 255
 72e:	9f 4f       	sbci	r25, 0xFF	; 255
 730:	99 23       	and	r25, r25
 732:	a9 f0       	breq	.+42     	; 0x75e <__floatsisf+0x40>
 734:	f9 2f       	mov	r31, r25
 736:	96 e9       	ldi	r25, 0x96	; 150
 738:	bb 27       	eor	r27, r27
 73a:	93 95       	inc	r25
 73c:	f6 95       	lsr	r31
 73e:	87 95       	ror	r24
 740:	77 95       	ror	r23
 742:	67 95       	ror	r22
 744:	b7 95       	ror	r27
 746:	f1 11       	cpse	r31, r1
 748:	f8 cf       	rjmp	.-16     	; 0x73a <__floatsisf+0x1c>
 74a:	fa f4       	brpl	.+62     	; 0x78a <__floatsisf+0x6c>
 74c:	bb 0f       	add	r27, r27
 74e:	11 f4       	brne	.+4      	; 0x754 <__floatsisf+0x36>
 750:	60 ff       	sbrs	r22, 0
 752:	1b c0       	rjmp	.+54     	; 0x78a <__floatsisf+0x6c>
 754:	6f 5f       	subi	r22, 0xFF	; 255
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	8f 4f       	sbci	r24, 0xFF	; 255
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	16 c0       	rjmp	.+44     	; 0x78a <__floatsisf+0x6c>
 75e:	88 23       	and	r24, r24
 760:	11 f0       	breq	.+4      	; 0x766 <__floatsisf+0x48>
 762:	96 e9       	ldi	r25, 0x96	; 150
 764:	11 c0       	rjmp	.+34     	; 0x788 <__floatsisf+0x6a>
 766:	77 23       	and	r23, r23
 768:	21 f0       	breq	.+8      	; 0x772 <__floatsisf+0x54>
 76a:	9e e8       	ldi	r25, 0x8E	; 142
 76c:	87 2f       	mov	r24, r23
 76e:	76 2f       	mov	r23, r22
 770:	05 c0       	rjmp	.+10     	; 0x77c <__floatsisf+0x5e>
 772:	66 23       	and	r22, r22
 774:	71 f0       	breq	.+28     	; 0x792 <__floatsisf+0x74>
 776:	96 e8       	ldi	r25, 0x86	; 134
 778:	86 2f       	mov	r24, r22
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	2a f0       	brmi	.+10     	; 0x78a <__floatsisf+0x6c>
 780:	9a 95       	dec	r25
 782:	66 0f       	add	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	da f7       	brpl	.-10     	; 0x780 <__floatsisf+0x62>
 78a:	88 0f       	add	r24, r24
 78c:	96 95       	lsr	r25
 78e:	87 95       	ror	r24
 790:	97 f9       	bld	r25, 7
 792:	08 95       	ret

00000794 <__fp_cmp>:
 794:	99 0f       	add	r25, r25
 796:	00 08       	sbc	r0, r0
 798:	55 0f       	add	r21, r21
 79a:	aa 0b       	sbc	r26, r26
 79c:	e0 e8       	ldi	r30, 0x80	; 128
 79e:	fe ef       	ldi	r31, 0xFE	; 254
 7a0:	16 16       	cp	r1, r22
 7a2:	17 06       	cpc	r1, r23
 7a4:	e8 07       	cpc	r30, r24
 7a6:	f9 07       	cpc	r31, r25
 7a8:	c0 f0       	brcs	.+48     	; 0x7da <__fp_cmp+0x46>
 7aa:	12 16       	cp	r1, r18
 7ac:	13 06       	cpc	r1, r19
 7ae:	e4 07       	cpc	r30, r20
 7b0:	f5 07       	cpc	r31, r21
 7b2:	98 f0       	brcs	.+38     	; 0x7da <__fp_cmp+0x46>
 7b4:	62 1b       	sub	r22, r18
 7b6:	73 0b       	sbc	r23, r19
 7b8:	84 0b       	sbc	r24, r20
 7ba:	95 0b       	sbc	r25, r21
 7bc:	39 f4       	brne	.+14     	; 0x7cc <__fp_cmp+0x38>
 7be:	0a 26       	eor	r0, r26
 7c0:	61 f0       	breq	.+24     	; 0x7da <__fp_cmp+0x46>
 7c2:	23 2b       	or	r18, r19
 7c4:	24 2b       	or	r18, r20
 7c6:	25 2b       	or	r18, r21
 7c8:	21 f4       	brne	.+8      	; 0x7d2 <__fp_cmp+0x3e>
 7ca:	08 95       	ret
 7cc:	0a 26       	eor	r0, r26
 7ce:	09 f4       	brne	.+2      	; 0x7d2 <__fp_cmp+0x3e>
 7d0:	a1 40       	sbci	r26, 0x01	; 1
 7d2:	a6 95       	lsr	r26
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	81 1d       	adc	r24, r1
 7d8:	81 1d       	adc	r24, r1
 7da:	08 95       	ret

000007dc <__fp_inf>:
 7dc:	97 f9       	bld	r25, 7
 7de:	9f 67       	ori	r25, 0x7F	; 127
 7e0:	80 e8       	ldi	r24, 0x80	; 128
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	08 95       	ret

000007e8 <__fp_nan>:
 7e8:	9f ef       	ldi	r25, 0xFF	; 255
 7ea:	80 ec       	ldi	r24, 0xC0	; 192
 7ec:	08 95       	ret

000007ee <__fp_pscA>:
 7ee:	00 24       	eor	r0, r0
 7f0:	0a 94       	dec	r0
 7f2:	16 16       	cp	r1, r22
 7f4:	17 06       	cpc	r1, r23
 7f6:	18 06       	cpc	r1, r24
 7f8:	09 06       	cpc	r0, r25
 7fa:	08 95       	ret

000007fc <__fp_pscB>:
 7fc:	00 24       	eor	r0, r0
 7fe:	0a 94       	dec	r0
 800:	12 16       	cp	r1, r18
 802:	13 06       	cpc	r1, r19
 804:	14 06       	cpc	r1, r20
 806:	05 06       	cpc	r0, r21
 808:	08 95       	ret

0000080a <__fp_round>:
 80a:	09 2e       	mov	r0, r25
 80c:	03 94       	inc	r0
 80e:	00 0c       	add	r0, r0
 810:	11 f4       	brne	.+4      	; 0x816 <__fp_round+0xc>
 812:	88 23       	and	r24, r24
 814:	52 f0       	brmi	.+20     	; 0x82a <__fp_round+0x20>
 816:	bb 0f       	add	r27, r27
 818:	40 f4       	brcc	.+16     	; 0x82a <__fp_round+0x20>
 81a:	bf 2b       	or	r27, r31
 81c:	11 f4       	brne	.+4      	; 0x822 <__fp_round+0x18>
 81e:	60 ff       	sbrs	r22, 0
 820:	04 c0       	rjmp	.+8      	; 0x82a <__fp_round+0x20>
 822:	6f 5f       	subi	r22, 0xFF	; 255
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <__fp_split3>:
 82c:	57 fd       	sbrc	r21, 7
 82e:	90 58       	subi	r25, 0x80	; 128
 830:	44 0f       	add	r20, r20
 832:	55 1f       	adc	r21, r21
 834:	59 f0       	breq	.+22     	; 0x84c <__fp_splitA+0x10>
 836:	5f 3f       	cpi	r21, 0xFF	; 255
 838:	71 f0       	breq	.+28     	; 0x856 <__fp_splitA+0x1a>
 83a:	47 95       	ror	r20

0000083c <__fp_splitA>:
 83c:	88 0f       	add	r24, r24
 83e:	97 fb       	bst	r25, 7
 840:	99 1f       	adc	r25, r25
 842:	61 f0       	breq	.+24     	; 0x85c <__fp_splitA+0x20>
 844:	9f 3f       	cpi	r25, 0xFF	; 255
 846:	79 f0       	breq	.+30     	; 0x866 <__fp_splitA+0x2a>
 848:	87 95       	ror	r24
 84a:	08 95       	ret
 84c:	12 16       	cp	r1, r18
 84e:	13 06       	cpc	r1, r19
 850:	14 06       	cpc	r1, r20
 852:	55 1f       	adc	r21, r21
 854:	f2 cf       	rjmp	.-28     	; 0x83a <__fp_split3+0xe>
 856:	46 95       	lsr	r20
 858:	f1 df       	rcall	.-30     	; 0x83c <__fp_splitA>
 85a:	08 c0       	rjmp	.+16     	; 0x86c <__fp_splitA+0x30>
 85c:	16 16       	cp	r1, r22
 85e:	17 06       	cpc	r1, r23
 860:	18 06       	cpc	r1, r24
 862:	99 1f       	adc	r25, r25
 864:	f1 cf       	rjmp	.-30     	; 0x848 <__fp_splitA+0xc>
 866:	86 95       	lsr	r24
 868:	71 05       	cpc	r23, r1
 86a:	61 05       	cpc	r22, r1
 86c:	08 94       	sec
 86e:	08 95       	ret

00000870 <__fp_zero>:
 870:	e8 94       	clt

00000872 <__fp_szero>:
 872:	bb 27       	eor	r27, r27
 874:	66 27       	eor	r22, r22
 876:	77 27       	eor	r23, r23
 878:	cb 01       	movw	r24, r22
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret

0000087e <__gesf2>:
 87e:	8a df       	rcall	.-236    	; 0x794 <__fp_cmp>
 880:	08 f4       	brcc	.+2      	; 0x884 <__gesf2+0x6>
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	08 95       	ret

00000886 <__mulsf3>:
 886:	0b d0       	rcall	.+22     	; 0x89e <__mulsf3x>
 888:	c0 cf       	rjmp	.-128    	; 0x80a <__fp_round>
 88a:	b1 df       	rcall	.-158    	; 0x7ee <__fp_pscA>
 88c:	28 f0       	brcs	.+10     	; 0x898 <__mulsf3+0x12>
 88e:	b6 df       	rcall	.-148    	; 0x7fc <__fp_pscB>
 890:	18 f0       	brcs	.+6      	; 0x898 <__mulsf3+0x12>
 892:	95 23       	and	r25, r21
 894:	09 f0       	breq	.+2      	; 0x898 <__mulsf3+0x12>
 896:	a2 cf       	rjmp	.-188    	; 0x7dc <__fp_inf>
 898:	a7 cf       	rjmp	.-178    	; 0x7e8 <__fp_nan>
 89a:	11 24       	eor	r1, r1
 89c:	ea cf       	rjmp	.-44     	; 0x872 <__fp_szero>

0000089e <__mulsf3x>:
 89e:	c6 df       	rcall	.-116    	; 0x82c <__fp_split3>
 8a0:	a0 f3       	brcs	.-24     	; 0x88a <__mulsf3+0x4>

000008a2 <__mulsf3_pse>:
 8a2:	95 9f       	mul	r25, r21
 8a4:	d1 f3       	breq	.-12     	; 0x89a <__mulsf3+0x14>
 8a6:	95 0f       	add	r25, r21
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	55 1f       	adc	r21, r21
 8ac:	62 9f       	mul	r22, r18
 8ae:	f0 01       	movw	r30, r0
 8b0:	72 9f       	mul	r23, r18
 8b2:	bb 27       	eor	r27, r27
 8b4:	f0 0d       	add	r31, r0
 8b6:	b1 1d       	adc	r27, r1
 8b8:	63 9f       	mul	r22, r19
 8ba:	aa 27       	eor	r26, r26
 8bc:	f0 0d       	add	r31, r0
 8be:	b1 1d       	adc	r27, r1
 8c0:	aa 1f       	adc	r26, r26
 8c2:	64 9f       	mul	r22, r20
 8c4:	66 27       	eor	r22, r22
 8c6:	b0 0d       	add	r27, r0
 8c8:	a1 1d       	adc	r26, r1
 8ca:	66 1f       	adc	r22, r22
 8cc:	82 9f       	mul	r24, r18
 8ce:	22 27       	eor	r18, r18
 8d0:	b0 0d       	add	r27, r0
 8d2:	a1 1d       	adc	r26, r1
 8d4:	62 1f       	adc	r22, r18
 8d6:	73 9f       	mul	r23, r19
 8d8:	b0 0d       	add	r27, r0
 8da:	a1 1d       	adc	r26, r1
 8dc:	62 1f       	adc	r22, r18
 8de:	83 9f       	mul	r24, r19
 8e0:	a0 0d       	add	r26, r0
 8e2:	61 1d       	adc	r22, r1
 8e4:	22 1f       	adc	r18, r18
 8e6:	74 9f       	mul	r23, r20
 8e8:	33 27       	eor	r19, r19
 8ea:	a0 0d       	add	r26, r0
 8ec:	61 1d       	adc	r22, r1
 8ee:	23 1f       	adc	r18, r19
 8f0:	84 9f       	mul	r24, r20
 8f2:	60 0d       	add	r22, r0
 8f4:	21 1d       	adc	r18, r1
 8f6:	82 2f       	mov	r24, r18
 8f8:	76 2f       	mov	r23, r22
 8fa:	6a 2f       	mov	r22, r26
 8fc:	11 24       	eor	r1, r1
 8fe:	9f 57       	subi	r25, 0x7F	; 127
 900:	50 40       	sbci	r21, 0x00	; 0
 902:	8a f0       	brmi	.+34     	; 0x926 <__mulsf3_pse+0x84>
 904:	e1 f0       	breq	.+56     	; 0x93e <__mulsf3_pse+0x9c>
 906:	88 23       	and	r24, r24
 908:	4a f0       	brmi	.+18     	; 0x91c <__mulsf3_pse+0x7a>
 90a:	ee 0f       	add	r30, r30
 90c:	ff 1f       	adc	r31, r31
 90e:	bb 1f       	adc	r27, r27
 910:	66 1f       	adc	r22, r22
 912:	77 1f       	adc	r23, r23
 914:	88 1f       	adc	r24, r24
 916:	91 50       	subi	r25, 0x01	; 1
 918:	50 40       	sbci	r21, 0x00	; 0
 91a:	a9 f7       	brne	.-22     	; 0x906 <__mulsf3_pse+0x64>
 91c:	9e 3f       	cpi	r25, 0xFE	; 254
 91e:	51 05       	cpc	r21, r1
 920:	70 f0       	brcs	.+28     	; 0x93e <__mulsf3_pse+0x9c>
 922:	5c cf       	rjmp	.-328    	; 0x7dc <__fp_inf>
 924:	a6 cf       	rjmp	.-180    	; 0x872 <__fp_szero>
 926:	5f 3f       	cpi	r21, 0xFF	; 255
 928:	ec f3       	brlt	.-6      	; 0x924 <__mulsf3_pse+0x82>
 92a:	98 3e       	cpi	r25, 0xE8	; 232
 92c:	dc f3       	brlt	.-10     	; 0x924 <__mulsf3_pse+0x82>
 92e:	86 95       	lsr	r24
 930:	77 95       	ror	r23
 932:	67 95       	ror	r22
 934:	b7 95       	ror	r27
 936:	f7 95       	ror	r31
 938:	e7 95       	ror	r30
 93a:	9f 5f       	subi	r25, 0xFF	; 255
 93c:	c1 f7       	brne	.-16     	; 0x92e <__mulsf3_pse+0x8c>
 93e:	fe 2b       	or	r31, r30
 940:	88 0f       	add	r24, r24
 942:	91 1d       	adc	r25, r1
 944:	96 95       	lsr	r25
 946:	87 95       	ror	r24
 948:	97 f9       	bld	r25, 7
 94a:	08 95       	ret

0000094c <memcpy>:
 94c:	fb 01       	movw	r30, r22
 94e:	dc 01       	movw	r26, r24
 950:	02 c0       	rjmp	.+4      	; 0x956 <memcpy+0xa>
 952:	01 90       	ld	r0, Z+
 954:	0d 92       	st	X+, r0
 956:	41 50       	subi	r20, 0x01	; 1
 958:	50 40       	sbci	r21, 0x00	; 0
 95a:	d8 f7       	brcc	.-10     	; 0x952 <memcpy+0x6>
 95c:	08 95       	ret

0000095e <_exit>:
 95e:	f8 94       	cli

00000960 <__stop_program>:
 960:	ff cf       	rjmp	.-2      	; 0x960 <__stop_program>
