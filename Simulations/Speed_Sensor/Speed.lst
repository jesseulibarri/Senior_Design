
Speed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000c88  00000d1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800104  00800104  00000d20  2**0
                  ALLOC
  3 .stab         000018d8  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110e  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003706  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003718  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 33       	cpi	r26, 0x37	; 55
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 97 03 	call	0x72e	; 0x72e <main>
  c6:	0c 94 42 06 	jmp	0xc84	; 0xc84 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <timer1_init>:
uint16_t sixteen_bit_timer_val;
extern char lcd_string_array[32];

void timer1_init() {
    // Fast PWM mode, TOP in OCR1A, OC pin disconnected, prescale 64
    TCCR1A |= (1 << WGM10) | (1 << WGM11);
  ce:	8f b5       	in	r24, 0x2f	; 47
  d0:	83 60       	ori	r24, 0x03	; 3
  d2:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS10) | (1 << CS11);
  d4:	8e b5       	in	r24, 0x2e	; 46
  d6:	8b 61       	ori	r24, 0x1B	; 27
  d8:	8e bd       	out	0x2e, r24	; 46
    // OCR1A will define the period of the pulses
    //OCR1A = sixteen_bit_timer_val;
    OCR1A = sixteen_bit_timer_val;
  da:	80 91 05 01 	lds	r24, 0x0105
  de:	90 91 06 01 	lds	r25, 0x0106
  e2:	9b bd       	out	0x2b, r25	; 43
  e4:	8a bd       	out	0x2a, r24	; 42
    // Set interrupt everytime the timer overflows
    TIMSK |= (1 << TOIE1);
  e6:	87 b7       	in	r24, 0x37	; 55
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	87 bf       	out	0x37, r24	; 55
  ec:	08 95       	ret

000000ee <__vector_14>:
}//timer1_init


ISR(TIMER1_OVF_vect) {
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24

    PORTB |= (1 << PB0);
  fa:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	85 e3       	ldi	r24, 0x35	; 53
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <__vector_14+0x10>
 102:	00 00       	nop
    _delay_us(10);
    PORTB &= ~(1 << PB0);
 104:	c0 98       	cbi	0x18, 0	; 24

}
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	81 11       	cpse	r24, r1
 116:	01 c0       	rjmp	.+2      	; 0x11a <send_lcd+0x8>
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 11c:	77 9b       	sbis	0x0e, 7	; 14
 11e:	fe cf       	rjmp	.-4      	; 0x11c <send_lcd+0xa>
  SPDR = byte;                        //send payload
 120:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 122:	77 9b       	sbis	0x0e, 7	; 14
 124:	fe cf       	rjmp	.-4      	; 0x122 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 126:	80 91 62 00 	lds	r24, 0x0062
 12a:	88 60       	ori	r24, 0x08	; 8
 12c:	80 93 62 00 	sts	0x0062, r24
 130:	80 91 62 00 	lds	r24, 0x0062
 134:	87 7f       	andi	r24, 0xF7	; 247
 136:	80 93 62 00 	sts	0x0062, r24
 13a:	08 95       	ret

0000013c <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
 13c:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 13e:	c0 91 04 01 	lds	r28, 0x0104
 142:	8c 0f       	add	r24, r28
 144:	91 1d       	adc	r25, r1
 146:	fc 01       	movw	r30, r24
 148:	60 81       	ld	r22, Z
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 i++;   //increment to next character
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	8c 0f       	add	r24, r28
 154:	80 93 04 01 	sts	0x0104, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 158:	80 31       	cpi	r24, 0x10	; 16
 15a:	81 f0       	breq	.+32     	; 0x17c <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 15c:	80 32       	cpi	r24, 0x20	; 32
 15e:	11 f0       	breq	.+4      	; 0x164 <refresh_lcd+0x28>
}//refresh_lcd
 160:	cf 91       	pop	r28
 162:	08 95       	ret
 164:	85 ed       	ldi	r24, 0xD5	; 213
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <refresh_lcd+0x2a>
 16a:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 16c:	60 e8       	ldi	r22, 0x80	; 128
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 174:	10 92 04 01 	sts	0x0104, r1
}//refresh_lcd
 178:	cf 91       	pop	r28
 17a:	08 95       	ret
 17c:	f5 ed       	ldi	r31, 0xD5	; 213
 17e:	fa 95       	dec	r31
 180:	f1 f7       	brne	.-4      	; 0x17e <refresh_lcd+0x42>
 182:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 184:	60 ec       	ldi	r22, 0xC0	; 192
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 18c:	80 91 04 01 	lds	r24, 0x0104
 190:	e5 cf       	rjmp	.-54     	; 0x15c <refresh_lcd+0x20>

00000192 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	1f 92       	push	r1
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 1a6:	66 0f       	add	r22, r22
 1a8:	66 0f       	add	r22, r22
 1aa:	66 0f       	add	r22, r22
 1ac:	60 5c       	subi	r22, 0xC0	; 192
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	99 83       	std	Y+1, r25	; 0x01
 1b2:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 1b6:	85 ed       	ldi	r24, 0xD5	; 213
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <set_custom_character+0x26>
 1bc:	00 00       	nop
 1be:	e1 2e       	mov	r14, r17
 1c0:	99 81       	ldd	r25, Y+1	; 0x01
 1c2:	f9 2e       	mov	r15, r25
 1c4:	87 01       	movw	r16, r14
 1c6:	08 5f       	subi	r16, 0xF8	; 248
 1c8:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 1ca:	f7 01       	movw	r30, r14
 1cc:	61 91       	ld	r22, Z+
 1ce:	7f 01       	movw	r14, r30
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 1d6:	f5 ed       	ldi	r31, 0xD5	; 213
 1d8:	fa 95       	dec	r31
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <set_custom_character+0x46>
 1dc:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 1de:	e0 16       	cp	r14, r16
 1e0:	f1 06       	cpc	r15, r17
 1e2:	99 f7       	brne	.-26     	; 0x1ca <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 1e4:	0f 90       	pop	r0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	08 95       	ret

000001f4 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 1f4:	90 e4       	ldi	r25, 0x40	; 64
 1f6:	89 9f       	mul	r24, r25
 1f8:	60 0d       	add	r22, r0
 1fa:	11 24       	eor	r1, r1
 1fc:	60 5c       	subi	r22, 0xC0	; 192
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0c 94 89 00 	jmp	0x112	; 0x112 <send_lcd>

00000204 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
 204:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 206:	88 23       	and	r24, r24
 208:	b9 f1       	breq	.+110    	; 0x278 <uint2lcd+0x74>
 20a:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 20c:	84 36       	cpi	r24, 0x64	; 100
 20e:	98 f4       	brcc	.+38     	; 0x236 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 210:	8a 30       	cpi	r24, 0x0A	; 10
 212:	d8 f4       	brcc	.+54     	; 0x24a <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 214:	8d ec       	ldi	r24, 0xCD	; 205
 216:	c8 9f       	mul	r28, r24
 218:	81 2d       	mov	r24, r1
 21a:	11 24       	eor	r1, r1
 21c:	86 95       	lsr	r24
 21e:	86 95       	lsr	r24
 220:	86 95       	lsr	r24
 222:	6c 2f       	mov	r22, r28
 224:	2a e0       	ldi	r18, 0x0A	; 10
 226:	82 9f       	mul	r24, r18
 228:	60 19       	sub	r22, r0
 22a:	11 24       	eor	r1, r1
 22c:	60 5d       	subi	r22, 0xD0	; 208
 22e:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 230:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 232:	0c 94 89 00 	jmp	0x112	; 0x112 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 236:	69 e2       	ldi	r22, 0x29	; 41
 238:	86 9f       	mul	r24, r22
 23a:	61 2d       	mov	r22, r1
 23c:	11 24       	eor	r1, r1
 23e:	62 95       	swap	r22
 240:	6f 70       	andi	r22, 0x0F	; 15
 242:	60 5d       	subi	r22, 0xD0	; 208
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 24a:	89 e2       	ldi	r24, 0x29	; 41
 24c:	c8 9f       	mul	r28, r24
 24e:	81 2d       	mov	r24, r1
 250:	11 24       	eor	r1, r1
 252:	82 95       	swap	r24
 254:	8f 70       	andi	r24, 0x0F	; 15
 256:	9c 2f       	mov	r25, r28
 258:	24 e6       	ldi	r18, 0x64	; 100
 25a:	82 9f       	mul	r24, r18
 25c:	90 19       	sub	r25, r0
 25e:	11 24       	eor	r1, r1
 260:	6d ec       	ldi	r22, 0xCD	; 205
 262:	96 9f       	mul	r25, r22
 264:	61 2d       	mov	r22, r1
 266:	11 24       	eor	r1, r1
 268:	66 95       	lsr	r22
 26a:	66 95       	lsr	r22
 26c:	66 95       	lsr	r22
 26e:	60 5d       	subi	r22, 0xD0	; 208
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 276:	ce cf       	rjmp	.-100    	; 0x214 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 278:	60 e3       	ldi	r22, 0x30	; 48
 27a:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
 27c:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 27e:	0c 94 89 00 	jmp	0x112	; 0x112 <send_lcd>

00000282 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
 282:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 284:	87 fd       	sbrc	r24, 7
 286:	03 c0       	rjmp	.+6      	; 0x28e <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
 288:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
 28a:	0c 94 02 01 	jmp	0x204	; 0x204 <uint2lcd>
 28e:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 290:	6d e2       	ldi	r22, 0x2D	; 45
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 298:	85 ed       	ldi	r24, 0xD5	; 213
 29a:	8a 95       	dec	r24
 29c:	f1 f7       	brne	.-4      	; 0x29a <int2lcd+0x18>
 29e:	00 00       	nop
 2a0:	8c 2f       	mov	r24, r28
 2a2:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
 2a4:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 2a6:	0c 94 02 01 	jmp	0x204	; 0x204 <uint2lcd>

000002aa <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
 2aa:	6e e0       	ldi	r22, 0x0E	; 14
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0c 94 89 00 	jmp	0x112	; 0x112 <send_lcd>

000002b2 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
 2b2:	6c e0       	ldi	r22, 0x0C	; 12
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0c 94 89 00 	jmp	0x112	; 0x112 <send_lcd>

000002ba <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
 2ba:	6e e1       	ldi	r22, 0x1E	; 30
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0c 94 89 00 	jmp	0x112	; 0x112 <send_lcd>

000002c2 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
 2c2:	68 e1       	ldi	r22, 0x18	; 24
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0c 94 89 00 	jmp	0x112	; 0x112 <send_lcd>

000002ca <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2ca:	e2 e6       	ldi	r30, 0x62	; 98
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	88 60       	ori	r24, 0x08	; 8
 2d2:	80 83       	st	Z, r24
 2d4:	80 81       	ld	r24, Z
 2d6:	87 7f       	andi	r24, 0xF7	; 247
 2d8:	80 83       	st	Z, r24
 2da:	08 95       	ret

000002dc <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 2e4:	8f e1       	ldi	r24, 0x1F	; 31
 2e6:	9c e1       	ldi	r25, 0x1C	; 28
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <clear_display+0xc>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <clear_display+0x12>
 2ee:	00 00       	nop
 2f0:	08 95       	ret

000002f2 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 2fa:	8f e6       	ldi	r24, 0x6F	; 111
 2fc:	97 e1       	ldi	r25, 0x17	; 23
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <cursor_home+0xc>
 302:	00 c0       	rjmp	.+0      	; 0x304 <cursor_home+0x12>
 304:	00 00       	nop
 306:	08 95       	ret

00000308 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 308:	60 ec       	ldi	r22, 0xC0	; 192
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0c 94 89 00 	jmp	0x112	; 0x112 <send_lcd>

00000310 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 310:	60 e8       	ldi	r22, 0x80	; 128
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0c 94 89 00 	jmp	0x112	; 0x112 <send_lcd>

00000318 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
 318:	cf 93       	push	r28
 31a:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
 31c:	60 e2       	ldi	r22, 0x20	; 32
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 324:	85 ed       	ldi	r24, 0xD5	; 213
 326:	8a 95       	dec	r24
 328:	f1 f7       	brne	.-4      	; 0x326 <fill_spaces+0xe>
 32a:	00 00       	nop
 32c:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 32e:	b1 f7       	brne	.-20     	; 0x31c <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
 334:	68 2f       	mov	r22, r24
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0c 94 89 00 	jmp	0x112	; 0x112 <send_lcd>

0000033c <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	c0 e0       	ldi	r28, 0x00	; 0
 34a:	f8 01       	movw	r30, r16
 34c:	e4 0f       	add	r30, r20
 34e:	f5 1f       	adc	r31, r21
 350:	60 81       	ld	r22, Z
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 358:	85 ed       	ldi	r24, 0xD5	; 213
 35a:	8a 95       	dec	r24
 35c:	f1 f7       	brne	.-4      	; 0x35a <string2lcd+0x1e>
 35e:	00 00       	nop
 360:	cf 5f       	subi	r28, 0xFF	; 255
 362:	4c 2f       	mov	r20, r28
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	f8 01       	movw	r30, r16
 368:	01 90       	ld	r0, Z+
 36a:	00 20       	and	r0, r0
 36c:	e9 f7       	brne	.-6      	; 0x368 <string2lcd+0x2c>
 36e:	9f 01       	movw	r18, r30
 370:	20 1b       	sub	r18, r16
 372:	31 0b       	sbc	r19, r17
 374:	22 50       	subi	r18, 0x02	; 2
 376:	31 09       	sbc	r19, r1
 378:	24 17       	cp	r18, r20
 37a:	35 07       	cpc	r19, r21
 37c:	30 f7       	brcc	.-52     	; 0x34a <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

00000386 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	99 ef       	ldi	r25, 0xF9	; 249
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <lcd_init+0x4>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <lcd_init+0xa>
 390:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 392:	88 e0       	ldi	r24, 0x08	; 8
 394:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
 398:	60 e3       	ldi	r22, 0x30	; 48
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 3a0:	8f e5       	ldi	r24, 0x5F	; 95
 3a2:	9d e6       	ldi	r25, 0x6D	; 109
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <lcd_init+0x1e>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <lcd_init+0x24>
 3aa:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 3ac:	60 e3       	ldi	r22, 0x30	; 48
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 3b4:	8f e5       	ldi	r24, 0x5F	; 95
 3b6:	9d e6       	ldi	r25, 0x6D	; 109
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <lcd_init+0x32>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <lcd_init+0x38>
 3be:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 3c0:	60 e3       	ldi	r22, 0x30	; 48
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 3c8:	8f e5       	ldi	r24, 0x5F	; 95
 3ca:	9d e6       	ldi	r25, 0x6D	; 109
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_init+0x46>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <lcd_init+0x4c>
 3d2:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
 3d4:	68 e3       	ldi	r22, 0x38	; 56
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 3dc:	8f e1       	ldi	r24, 0x1F	; 31
 3de:	9e e4       	ldi	r25, 0x4E	; 78
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_init+0x5a>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <lcd_init+0x60>
 3e6:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
 3e8:	68 e0       	ldi	r22, 0x08	; 8
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 3f0:	8f e1       	ldi	r24, 0x1F	; 31
 3f2:	9e e4       	ldi	r25, 0x4E	; 78
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <lcd_init+0x6e>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <lcd_init+0x74>
 3fa:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 404:	8f e1       	ldi	r24, 0x1F	; 31
 406:	9e e4       	ldi	r25, 0x4E	; 78
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <lcd_init+0x82>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <lcd_init+0x88>
 40e:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
 410:	66 e0       	ldi	r22, 0x06	; 6
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 418:	8f e1       	ldi	r24, 0x1F	; 31
 41a:	9e e4       	ldi	r25, 0x4E	; 78
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <lcd_init+0x96>
 420:	00 c0       	rjmp	.+0      	; 0x422 <lcd_init+0x9c>
 422:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
 424:	6c e0       	ldi	r22, 0x0C	; 12
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 42c:	8f e1       	ldi	r24, 0x1F	; 31
 42e:	9e e4       	ldi	r25, 0x4E	; 78
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <lcd_init+0xaa>
 434:	00 c0       	rjmp	.+0      	; 0x436 <lcd_init+0xb0>
 436:	00 00       	nop
 438:	08 95       	ret

0000043a <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 43a:	8f 92       	push	r8
 43c:	9f 92       	push	r9
 43e:	af 92       	push	r10
 440:	bf 92       	push	r11
 442:	cf 92       	push	r12
 444:	df 92       	push	r13
 446:	ef 92       	push	r14
 448:	ff 92       	push	r15
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
 456:	69 97       	sbiw	r28, 0x19	; 25
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
 462:	f4 2e       	mov	r15, r20
 464:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
 466:	00 23       	and	r16, r16
 468:	59 f0       	breq	.+22     	; 0x480 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
 46a:	4b 01       	movw	r8, r22
 46c:	5c 01       	movw	r10, r24
 46e:	88 24       	eor	r8, r8
 470:	b7 fc       	sbrc	r11, 7
 472:	83 94       	inc	r8
 474:	99 24       	eor	r9, r9
 476:	aa 24       	eor	r10, r10
 478:	bb 24       	eor	r11, r11
 47a:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
 47c:	97 fd       	sbrc	r25, 7
 47e:	8f c0       	rjmp	.+286    	; 0x59e <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
 480:	11 23       	and	r17, r17
 482:	09 f4       	brne	.+2      	; 0x486 <lcd_int32+0x4c>
 484:	84 c0       	rjmp	.+264    	; 0x58e <lcd_int32+0x154>
 486:	9e 01       	movw	r18, r28
 488:	2f 5f       	subi	r18, 0xFF	; 255
 48a:	3f 4f       	sbci	r19, 0xFF	; 255
 48c:	69 01       	movw	r12, r18
 48e:	59 01       	movw	r10, r18
 490:	88 24       	eor	r8, r8
 492:	8a 94       	dec	r8
 494:	81 0e       	add	r8, r17
 496:	91 2c       	mov	r9, r1
 498:	3f ef       	ldi	r19, 0xFF	; 255
 49a:	83 1a       	sub	r8, r19
 49c:	93 0a       	sbc	r9, r19
 49e:	8c 0c       	add	r8, r12
 4a0:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 4a2:	2a e0       	ldi	r18, 0x0A	; 10
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodsi4>
 4ae:	e6 2f       	mov	r30, r22
 4b0:	2a 8b       	std	Y+18, r18	; 0x12
 4b2:	3b 8b       	std	Y+19, r19	; 0x13
 4b4:	4c 8b       	std	Y+20, r20	; 0x14
 4b6:	5d 8b       	std	Y+21, r21	; 0x15
 4b8:	6a 89       	ldd	r22, Y+18	; 0x12
 4ba:	7b 89       	ldd	r23, Y+19	; 0x13
 4bc:	8c 89       	ldd	r24, Y+20	; 0x14
 4be:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 4c0:	20 e3       	ldi	r18, 0x30	; 48
 4c2:	2e 0f       	add	r18, r30
 4c4:	f5 01       	movw	r30, r10
 4c6:	21 93       	st	Z+, r18
 4c8:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
 4ca:	e8 15       	cp	r30, r8
 4cc:	f9 05       	cpc	r31, r9
 4ce:	49 f7       	brne	.-46     	; 0x4a2 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 4d0:	bb 24       	eor	r11, r11
 4d2:	b3 94       	inc	r11
 4d4:	b1 0e       	add	r11, r17
 4d6:	f6 01       	movw	r30, r12
 4d8:	e1 0f       	add	r30, r17
 4da:	f1 1d       	adc	r31, r1
 4dc:	2e e2       	ldi	r18, 0x2E	; 46
 4de:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
 4e0:	2a e0       	ldi	r18, 0x0A	; 10
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	50 e0       	ldi	r21, 0x00	; 0
 4e8:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodsi4>
 4ec:	e6 2f       	mov	r30, r22
 4ee:	2a 8b       	std	Y+18, r18	; 0x12
 4f0:	3b 8b       	std	Y+19, r19	; 0x13
 4f2:	4c 8b       	std	Y+20, r20	; 0x14
 4f4:	5d 8b       	std	Y+21, r21	; 0x15
 4f6:	6e 8b       	std	Y+22, r22	; 0x16
 4f8:	7f 8b       	std	Y+23, r23	; 0x17
 4fa:	88 8f       	std	Y+24, r24	; 0x18
 4fc:	99 8f       	std	Y+25, r25	; 0x19
 4fe:	6a 89       	ldd	r22, Y+18	; 0x12
 500:	7b 89       	ldd	r23, Y+19	; 0x13
 502:	8c 89       	ldd	r24, Y+20	; 0x14
 504:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 506:	11 e0       	ldi	r17, 0x01	; 1
 508:	1b 0d       	add	r17, r11
 50a:	d6 01       	movw	r26, r12
 50c:	ab 0d       	add	r26, r11
 50e:	b1 1d       	adc	r27, r1
 510:	e0 5d       	subi	r30, 0xD0	; 208
 512:	ec 93       	st	X, r30
 514:	b1 2e       	mov	r11, r17
        }while(qr.quot);
 516:	61 15       	cp	r22, r1
 518:	71 05       	cpc	r23, r1
 51a:	81 05       	cpc	r24, r1
 51c:	91 05       	cpc	r25, r1
 51e:	01 f7       	brne	.-64     	; 0x4e0 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
 520:	ff 20       	and	r15, r15
 522:	61 f0       	breq	.+24     	; 0x53c <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 524:	e1 10       	cpse	r14, r1
 526:	39 c0       	rjmp	.+114    	; 0x59a <lcd_int32+0x160>
 528:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 52a:	1f 15       	cp	r17, r15
 52c:	38 f4       	brcc	.+14     	; 0x53c <lcd_int32+0x102>
 52e:	f6 01       	movw	r30, r12
 530:	e1 0f       	add	r30, r17
 532:	f1 1d       	adc	r31, r1
 534:	80 83       	st	Z, r24
 536:	1f 5f       	subi	r17, 0xFF	; 255
 538:	1f 11       	cpse	r17, r15
 53a:	f9 cf       	rjmp	.-14     	; 0x52e <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 53c:	00 23       	and	r16, r16
 53e:	31 f0       	breq	.+12     	; 0x54c <lcd_int32+0x112>
 540:	f6 01       	movw	r30, r12
 542:	e1 0f       	add	r30, r17
 544:	f1 1d       	adc	r31, r1
 546:	8d e2       	ldi	r24, 0x2D	; 45
 548:	80 83       	st	Z, r24
 54a:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 54c:	11 50       	subi	r17, 0x01	; 1
 54e:	f6 01       	movw	r30, r12
 550:	e1 0f       	add	r30, r17
 552:	f1 1d       	adc	r31, r1
 554:	60 81       	ld	r22, Z
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 55c:	35 ed       	ldi	r19, 0xD5	; 213
 55e:	3a 95       	dec	r19
 560:	f1 f7       	brne	.-4      	; 0x55e <lcd_int32+0x124>
 562:	00 00       	nop
 564:	11 11       	cpse	r17, r1
 566:	f2 cf       	rjmp	.-28     	; 0x54c <lcd_int32+0x112>

}
 568:	69 96       	adiw	r28, 0x19	; 25
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	df 90       	pop	r13
 582:	cf 90       	pop	r12
 584:	bf 90       	pop	r11
 586:	af 90       	pop	r10
 588:	9f 90       	pop	r9
 58a:	8f 90       	pop	r8
 58c:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 58e:	b1 2c       	mov	r11, r1
 590:	9e 01       	movw	r18, r28
 592:	2f 5f       	subi	r18, 0xFF	; 255
 594:	3f 4f       	sbci	r19, 0xFF	; 255
 596:	69 01       	movw	r12, r18
 598:	a3 cf       	rjmp	.-186    	; 0x4e0 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 59a:	80 e3       	ldi	r24, 0x30	; 48
 59c:	c6 cf       	rjmp	.-116    	; 0x52a <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 59e:	90 95       	com	r25
 5a0:	80 95       	com	r24
 5a2:	70 95       	com	r23
 5a4:	61 95       	neg	r22
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
 5a8:	8f 4f       	sbci	r24, 0xFF	; 255
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	69 cf       	rjmp	.-302    	; 0x480 <lcd_int32+0x46>

000005ae <lcd_int16>:
 5ae:	5f 92       	push	r5
 5b0:	6f 92       	push	r6
 5b2:	7f 92       	push	r7
 5b4:	8f 92       	push	r8
 5b6:	9f 92       	push	r9
 5b8:	af 92       	push	r10
 5ba:	bf 92       	push	r11
 5bc:	cf 92       	push	r12
 5be:	df 92       	push	r13
 5c0:	ef 92       	push	r14
 5c2:	ff 92       	push	r15
 5c4:	0f 93       	push	r16
 5c6:	1f 93       	push	r17
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
 5d0:	61 97       	sbiw	r28, 0x11	; 17
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	f8 94       	cli
 5d6:	de bf       	out	0x3e, r29	; 62
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	cd bf       	out	0x3d, r28	; 61
 5dc:	a6 2e       	mov	r10, r22
 5de:	54 2e       	mov	r5, r20
 5e0:	62 2e       	mov	r6, r18
 5e2:	79 2e       	mov	r7, r25
 5e4:	77 1c       	adc	r7, r7
 5e6:	77 24       	eor	r7, r7
 5e8:	77 1c       	adc	r7, r7
 5ea:	b7 2c       	mov	r11, r7
 5ec:	c7 2c       	mov	r12, r7
 5ee:	d1 2c       	mov	r13, r1
 5f0:	ee 27       	eor	r30, r30
 5f2:	ff 27       	eor	r31, r31
 5f4:	ec 19       	sub	r30, r12
 5f6:	fd 09       	sbc	r31, r13
 5f8:	8e 27       	eor	r24, r30
 5fa:	9f 27       	eor	r25, r31
 5fc:	fc 01       	movw	r30, r24
 5fe:	ec 0d       	add	r30, r12
 600:	fd 1d       	adc	r31, r13
 602:	44 23       	and	r20, r20
 604:	09 f4       	brne	.+2      	; 0x608 <lcd_int16+0x5a>
 606:	8e c0       	rjmp	.+284    	; 0x724 <lcd_int16+0x176>
 608:	ce 01       	movw	r24, r28
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	7c 01       	movw	r14, r24
 60e:	8c 01       	movw	r16, r24
 610:	88 24       	eor	r8, r8
 612:	8a 94       	dec	r8
 614:	84 0e       	add	r8, r20
 616:	91 2c       	mov	r9, r1
 618:	9f ef       	ldi	r25, 0xFF	; 255
 61a:	89 1a       	sub	r8, r25
 61c:	99 0a       	sbc	r9, r25
 61e:	8e 0c       	add	r8, r14
 620:	9f 1c       	adc	r9, r15
 622:	6a e0       	ldi	r22, 0x0A	; 10
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	cf 01       	movw	r24, r30
 628:	0e 94 01 04 	call	0x802	; 0x802 <__divmodhi4>
 62c:	26 2f       	mov	r18, r22
 62e:	e2 2f       	mov	r30, r18
 630:	f7 2f       	mov	r31, r23
 632:	80 5d       	subi	r24, 0xD0	; 208
 634:	d8 01       	movw	r26, r16
 636:	8d 93       	st	X+, r24
 638:	8d 01       	movw	r16, r26
 63a:	a8 15       	cp	r26, r8
 63c:	b9 05       	cpc	r27, r9
 63e:	89 f7       	brne	.-30     	; 0x622 <lcd_int16+0x74>
 640:	01 e0       	ldi	r16, 0x01	; 1
 642:	05 0d       	add	r16, r5
 644:	d7 01       	movw	r26, r14
 646:	a5 0d       	add	r26, r5
 648:	b1 1d       	adc	r27, r1
 64a:	8e e2       	ldi	r24, 0x2E	; 46
 64c:	8c 93       	st	X, r24
 64e:	6a e0       	ldi	r22, 0x0A	; 10
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	cf 01       	movw	r24, r30
 654:	0e 94 01 04 	call	0x802	; 0x802 <__divmodhi4>
 658:	26 2f       	mov	r18, r22
 65a:	e2 2f       	mov	r30, r18
 65c:	f7 2f       	mov	r31, r23
 65e:	11 e0       	ldi	r17, 0x01	; 1
 660:	10 0f       	add	r17, r16
 662:	d7 01       	movw	r26, r14
 664:	a0 0f       	add	r26, r16
 666:	b1 1d       	adc	r27, r1
 668:	80 5d       	subi	r24, 0xD0	; 208
 66a:	8c 93       	st	X, r24
 66c:	01 2f       	mov	r16, r17
 66e:	30 97       	sbiw	r30, 0x00	; 0
 670:	71 f7       	brne	.-36     	; 0x64e <lcd_int16+0xa0>
 672:	61 10       	cpse	r6, r1
 674:	15 c0       	rjmp	.+42     	; 0x6a0 <lcd_int16+0xf2>
 676:	77 20       	and	r7, r7
 678:	39 f0       	breq	.+14     	; 0x688 <lcd_int16+0xda>
 67a:	11 e0       	ldi	r17, 0x01	; 1
 67c:	10 0f       	add	r17, r16
 67e:	f7 01       	movw	r30, r14
 680:	e0 0f       	add	r30, r16
 682:	f1 1d       	adc	r31, r1
 684:	8d e2       	ldi	r24, 0x2D	; 45
 686:	80 83       	st	Z, r24
 688:	aa 20       	and	r10, r10
 68a:	41 f1       	breq	.+80     	; 0x6dc <lcd_int16+0x12e>
 68c:	81 2f       	mov	r24, r17
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	2a 2d       	mov	r18, r10
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	82 17       	cp	r24, r18
 696:	93 07       	cpc	r25, r19
 698:	0c f5       	brge	.+66     	; 0x6dc <lcd_int16+0x12e>
 69a:	b1 2c       	mov	r11, r1
 69c:	40 e2       	ldi	r20, 0x20	; 32
 69e:	0c c0       	rjmp	.+24     	; 0x6b8 <lcd_int16+0x10a>
 6a0:	aa 20       	and	r10, r10
 6a2:	a1 f0       	breq	.+40     	; 0x6cc <lcd_int16+0x11e>
 6a4:	81 2f       	mov	r24, r17
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	2a 2d       	mov	r18, r10
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	2c 19       	sub	r18, r12
 6ae:	3d 09       	sbc	r19, r13
 6b0:	82 17       	cp	r24, r18
 6b2:	93 07       	cpc	r25, r19
 6b4:	5c f4       	brge	.+22     	; 0x6cc <lcd_int16+0x11e>
 6b6:	40 e3       	ldi	r20, 0x30	; 48
 6b8:	1f 5f       	subi	r17, 0xFF	; 255
 6ba:	f7 01       	movw	r30, r14
 6bc:	e8 0f       	add	r30, r24
 6be:	f9 1f       	adc	r31, r25
 6c0:	40 83       	st	Z, r20
 6c2:	81 2f       	mov	r24, r17
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	82 17       	cp	r24, r18
 6c8:	93 07       	cpc	r25, r19
 6ca:	b4 f3       	brlt	.-20     	; 0x6b8 <lcd_int16+0x10a>
 6cc:	bb 20       	and	r11, r11
 6ce:	31 f0       	breq	.+12     	; 0x6dc <lcd_int16+0x12e>
 6d0:	f7 01       	movw	r30, r14
 6d2:	e1 0f       	add	r30, r17
 6d4:	f1 1d       	adc	r31, r1
 6d6:	8d e2       	ldi	r24, 0x2D	; 45
 6d8:	80 83       	st	Z, r24
 6da:	1f 5f       	subi	r17, 0xFF	; 255
 6dc:	11 50       	subi	r17, 0x01	; 1
 6de:	f7 01       	movw	r30, r14
 6e0:	e1 0f       	add	r30, r17
 6e2:	f1 1d       	adc	r31, r1
 6e4:	60 81       	ld	r22, Z
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	0e 94 89 00 	call	0x112	; 0x112 <send_lcd>
 6ec:	95 ed       	ldi	r25, 0xD5	; 213
 6ee:	9a 95       	dec	r25
 6f0:	f1 f7       	brne	.-4      	; 0x6ee <lcd_int16+0x140>
 6f2:	00 00       	nop
 6f4:	11 11       	cpse	r17, r1
 6f6:	f2 cf       	rjmp	.-28     	; 0x6dc <lcd_int16+0x12e>
 6f8:	61 96       	adiw	r28, 0x11	; 17
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	f8 94       	cli
 6fe:	de bf       	out	0x3e, r29	; 62
 700:	0f be       	out	0x3f, r0	; 63
 702:	cd bf       	out	0x3d, r28	; 61
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	1f 91       	pop	r17
 70a:	0f 91       	pop	r16
 70c:	ff 90       	pop	r15
 70e:	ef 90       	pop	r14
 710:	df 90       	pop	r13
 712:	cf 90       	pop	r12
 714:	bf 90       	pop	r11
 716:	af 90       	pop	r10
 718:	9f 90       	pop	r9
 71a:	8f 90       	pop	r8
 71c:	7f 90       	pop	r7
 71e:	6f 90       	pop	r6
 720:	5f 90       	pop	r5
 722:	08 95       	ret
 724:	00 e0       	ldi	r16, 0x00	; 0
 726:	ce 01       	movw	r24, r28
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	7c 01       	movw	r14, r24
 72c:	90 cf       	rjmp	.-224    	; 0x64e <lcd_int16+0xa0>

0000072e <main>:

/******************** MAIN *************************/
int main()
{

double tire_circ = tire_diam * PI;
 72e:	60 91 01 01 	lds	r22, 0x0101
 732:	70 e0       	ldi	r23, 0x00	; 0
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 14 05 	call	0xa28	; 0xa28 <__floatsisf>
 73c:	20 ed       	ldi	r18, 0xD0	; 208
 73e:	3f e0       	ldi	r19, 0x0F	; 15
 740:	49 e4       	ldi	r20, 0x49	; 73
 742:	50 e4       	ldi	r21, 0x40	; 64
 744:	0e 94 a0 05 	call	0xb40	; 0xb40 <__mulsf3>
 748:	6b 01       	movw	r12, r22
 74a:	7c 01       	movw	r14, r24
double distance_per_pulse = tire_circ / sprocket_teeth;
 74c:	80 91 00 01 	lds	r24, 0x0100
 750:	68 2f       	mov	r22, r24
 752:	70 e0       	ldi	r23, 0x00	; 0
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e 94 14 05 	call	0xa28	; 0xa28 <__floatsisf>
 75c:	9b 01       	movw	r18, r22
 75e:	ac 01       	movw	r20, r24
 760:	c7 01       	movw	r24, r14
 762:	b6 01       	movw	r22, r12
 764:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3>
 768:	6b 01       	movw	r12, r22
 76a:	7c 01       	movw	r14, r24
// 1 mph = 17.6 in/sec
double period = distance_per_pulse / (speed * 17.6);
 76c:	80 91 02 01 	lds	r24, 0x0102
 770:	68 2f       	mov	r22, r24
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 14 05 	call	0xa28	; 0xa28 <__floatsisf>
 77c:	2d ec       	ldi	r18, 0xCD	; 205
 77e:	3c ec       	ldi	r19, 0xCC	; 204
 780:	4c e8       	ldi	r20, 0x8C	; 140
 782:	51 e4       	ldi	r21, 0x41	; 65
 784:	0e 94 a0 05 	call	0xb40	; 0xb40 <__mulsf3>
 788:	9b 01       	movw	r18, r22
 78a:	ac 01       	movw	r20, r24
 78c:	c7 01       	movw	r24, r14
 78e:	b6 01       	movw	r22, r12
 790:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3>
 794:	6b 01       	movw	r12, r22
 796:	7c 01       	movw	r14, r24
sixteen_bit_timer_val = ((double)period * 16000000) / 64;
 798:	20 e0       	ldi	r18, 0x00	; 0
 79a:	34 e2       	ldi	r19, 0x24	; 36
 79c:	44 e7       	ldi	r20, 0x74	; 116
 79e:	5b e4       	ldi	r21, 0x4B	; 75
 7a0:	0e 94 a0 05 	call	0xb40	; 0xb40 <__mulsf3>
 7a4:	20 e0       	ldi	r18, 0x00	; 0
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	40 e8       	ldi	r20, 0x80	; 128
 7aa:	5c e3       	ldi	r21, 0x3C	; 60
 7ac:	0e 94 a0 05 	call	0xb40	; 0xb40 <__mulsf3>
 7b0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixunssfsi>
 7b4:	70 93 06 01 	sts	0x0106, r23
 7b8:	60 93 05 01 	sts	0x0105, r22

itoa(period, lcd_string_array, 32);
 7bc:	c7 01       	movw	r24, r14
 7be:	b6 01       	movw	r22, r12
 7c0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fixsfsi>
 7c4:	dc 01       	movw	r26, r24
 7c6:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7c8:	40 e2       	ldi	r20, 0x20	; 32
 7ca:	67 e0       	ldi	r22, 0x07	; 7
 7cc:	71 e0       	ldi	r23, 0x01	; 1
 7ce:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>
refresh_lcd(lcd_string_array);
 7d2:	87 e0       	ldi	r24, 0x07	; 7
 7d4:	91 e0       	ldi	r25, 0x01	; 1
 7d6:	0e 94 9e 00 	call	0x13c	; 0x13c <refresh_lcd>

//PORTB.0 set to output
DDRB |= (1 << PB0);
 7da:	b8 9a       	sbi	0x17, 0	; 23
uint16_t sixteen_bit_timer_val;
extern char lcd_string_array[32];

void timer1_init() {
    // Fast PWM mode, TOP in OCR1A, OC pin disconnected, prescale 64
    TCCR1A |= (1 << WGM10) | (1 << WGM11);
 7dc:	8f b5       	in	r24, 0x2f	; 47
 7de:	83 60       	ori	r24, 0x03	; 3
 7e0:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS10) | (1 << CS11);
 7e2:	8e b5       	in	r24, 0x2e	; 46
 7e4:	8b 61       	ori	r24, 0x1B	; 27
 7e6:	8e bd       	out	0x2e, r24	; 46
    // OCR1A will define the period of the pulses
    //OCR1A = sixteen_bit_timer_val;
    OCR1A = sixteen_bit_timer_val;
 7e8:	80 91 05 01 	lds	r24, 0x0105
 7ec:	90 91 06 01 	lds	r25, 0x0106
 7f0:	9b bd       	out	0x2b, r25	; 43
 7f2:	8a bd       	out	0x2a, r24	; 42
    // Set interrupt everytime the timer overflows
    TIMSK |= (1 << TOIE1);
 7f4:	87 b7       	in	r24, 0x37	; 55
 7f6:	84 60       	ori	r24, 0x04	; 4
 7f8:	87 bf       	out	0x37, r24	; 55
refresh_lcd(lcd_string_array);

//PORTB.0 set to output
DDRB |= (1 << PB0);
timer1_init();
lcd_init();
 7fa:	0e 94 c3 01 	call	0x386	; 0x386 <lcd_init>
sei();
 7fe:	78 94       	sei
    while(1){ }
 800:	ff cf       	rjmp	.-2      	; 0x800 <main+0xd2>

00000802 <__divmodhi4>:
 802:	97 fb       	bst	r25, 7
 804:	07 2e       	mov	r0, r23
 806:	16 f4       	brtc	.+4      	; 0x80c <__divmodhi4+0xa>
 808:	00 94       	com	r0
 80a:	07 d0       	rcall	.+14     	; 0x81a <__divmodhi4_neg1>
 80c:	77 fd       	sbrc	r23, 7
 80e:	09 d0       	rcall	.+18     	; 0x822 <__divmodhi4_neg2>
 810:	0e 94 34 04 	call	0x868	; 0x868 <__udivmodhi4>
 814:	07 fc       	sbrc	r0, 7
 816:	05 d0       	rcall	.+10     	; 0x822 <__divmodhi4_neg2>
 818:	3e f4       	brtc	.+14     	; 0x828 <__divmodhi4_exit>

0000081a <__divmodhi4_neg1>:
 81a:	90 95       	com	r25
 81c:	81 95       	neg	r24
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	08 95       	ret

00000822 <__divmodhi4_neg2>:
 822:	70 95       	com	r23
 824:	61 95       	neg	r22
 826:	7f 4f       	sbci	r23, 0xFF	; 255

00000828 <__divmodhi4_exit>:
 828:	08 95       	ret

0000082a <__divmodsi4>:
 82a:	05 2e       	mov	r0, r21
 82c:	97 fb       	bst	r25, 7
 82e:	1e f4       	brtc	.+6      	; 0x836 <__divmodsi4+0xc>
 830:	00 94       	com	r0
 832:	0e 94 2c 04 	call	0x858	; 0x858 <__negsi2>
 836:	57 fd       	sbrc	r21, 7
 838:	07 d0       	rcall	.+14     	; 0x848 <__divmodsi4_neg2>
 83a:	0e 94 48 04 	call	0x890	; 0x890 <__udivmodsi4>
 83e:	07 fc       	sbrc	r0, 7
 840:	03 d0       	rcall	.+6      	; 0x848 <__divmodsi4_neg2>
 842:	4e f4       	brtc	.+18     	; 0x856 <__divmodsi4_exit>
 844:	0c 94 2c 04 	jmp	0x858	; 0x858 <__negsi2>

00000848 <__divmodsi4_neg2>:
 848:	50 95       	com	r21
 84a:	40 95       	com	r20
 84c:	30 95       	com	r19
 84e:	21 95       	neg	r18
 850:	3f 4f       	sbci	r19, 0xFF	; 255
 852:	4f 4f       	sbci	r20, 0xFF	; 255
 854:	5f 4f       	sbci	r21, 0xFF	; 255

00000856 <__divmodsi4_exit>:
 856:	08 95       	ret

00000858 <__negsi2>:
 858:	90 95       	com	r25
 85a:	80 95       	com	r24
 85c:	70 95       	com	r23
 85e:	61 95       	neg	r22
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	08 95       	ret

00000868 <__udivmodhi4>:
 868:	aa 1b       	sub	r26, r26
 86a:	bb 1b       	sub	r27, r27
 86c:	51 e1       	ldi	r21, 0x11	; 17
 86e:	07 c0       	rjmp	.+14     	; 0x87e <__udivmodhi4_ep>

00000870 <__udivmodhi4_loop>:
 870:	aa 1f       	adc	r26, r26
 872:	bb 1f       	adc	r27, r27
 874:	a6 17       	cp	r26, r22
 876:	b7 07       	cpc	r27, r23
 878:	10 f0       	brcs	.+4      	; 0x87e <__udivmodhi4_ep>
 87a:	a6 1b       	sub	r26, r22
 87c:	b7 0b       	sbc	r27, r23

0000087e <__udivmodhi4_ep>:
 87e:	88 1f       	adc	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	5a 95       	dec	r21
 884:	a9 f7       	brne	.-22     	; 0x870 <__udivmodhi4_loop>
 886:	80 95       	com	r24
 888:	90 95       	com	r25
 88a:	bc 01       	movw	r22, r24
 88c:	cd 01       	movw	r24, r26
 88e:	08 95       	ret

00000890 <__udivmodsi4>:
 890:	a1 e2       	ldi	r26, 0x21	; 33
 892:	1a 2e       	mov	r1, r26
 894:	aa 1b       	sub	r26, r26
 896:	bb 1b       	sub	r27, r27
 898:	fd 01       	movw	r30, r26
 89a:	0d c0       	rjmp	.+26     	; 0x8b6 <__udivmodsi4_ep>

0000089c <__udivmodsi4_loop>:
 89c:	aa 1f       	adc	r26, r26
 89e:	bb 1f       	adc	r27, r27
 8a0:	ee 1f       	adc	r30, r30
 8a2:	ff 1f       	adc	r31, r31
 8a4:	a2 17       	cp	r26, r18
 8a6:	b3 07       	cpc	r27, r19
 8a8:	e4 07       	cpc	r30, r20
 8aa:	f5 07       	cpc	r31, r21
 8ac:	20 f0       	brcs	.+8      	; 0x8b6 <__udivmodsi4_ep>
 8ae:	a2 1b       	sub	r26, r18
 8b0:	b3 0b       	sbc	r27, r19
 8b2:	e4 0b       	sbc	r30, r20
 8b4:	f5 0b       	sbc	r31, r21

000008b6 <__udivmodsi4_ep>:
 8b6:	66 1f       	adc	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	1a 94       	dec	r1
 8c0:	69 f7       	brne	.-38     	; 0x89c <__udivmodsi4_loop>
 8c2:	60 95       	com	r22
 8c4:	70 95       	com	r23
 8c6:	80 95       	com	r24
 8c8:	90 95       	com	r25
 8ca:	9b 01       	movw	r18, r22
 8cc:	ac 01       	movw	r20, r24
 8ce:	bd 01       	movw	r22, r26
 8d0:	cf 01       	movw	r24, r30
 8d2:	08 95       	ret

000008d4 <__divsf3>:
 8d4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3x>
 8d8:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_round>
 8dc:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_pscB>
 8e0:	58 f0       	brcs	.+22     	; 0x8f8 <__divsf3+0x24>
 8e2:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_pscA>
 8e6:	40 f0       	brcs	.+16     	; 0x8f8 <__divsf3+0x24>
 8e8:	29 f4       	brne	.+10     	; 0x8f4 <__divsf3+0x20>
 8ea:	5f 3f       	cpi	r21, 0xFF	; 255
 8ec:	29 f0       	breq	.+10     	; 0x8f8 <__divsf3+0x24>
 8ee:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_inf>
 8f2:	51 11       	cpse	r21, r1
 8f4:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_szero>
 8f8:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__fp_nan>

000008fc <__divsf3x>:
 8fc:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_split3>
 900:	68 f3       	brcs	.-38     	; 0x8dc <__divsf3+0x8>

00000902 <__divsf3_pse>:
 902:	99 23       	and	r25, r25
 904:	b1 f3       	breq	.-20     	; 0x8f2 <__divsf3+0x1e>
 906:	55 23       	and	r21, r21
 908:	91 f3       	breq	.-28     	; 0x8ee <__divsf3+0x1a>
 90a:	95 1b       	sub	r25, r21
 90c:	55 0b       	sbc	r21, r21
 90e:	bb 27       	eor	r27, r27
 910:	aa 27       	eor	r26, r26
 912:	62 17       	cp	r22, r18
 914:	73 07       	cpc	r23, r19
 916:	84 07       	cpc	r24, r20
 918:	38 f0       	brcs	.+14     	; 0x928 <__divsf3_pse+0x26>
 91a:	9f 5f       	subi	r25, 0xFF	; 255
 91c:	5f 4f       	sbci	r21, 0xFF	; 255
 91e:	22 0f       	add	r18, r18
 920:	33 1f       	adc	r19, r19
 922:	44 1f       	adc	r20, r20
 924:	aa 1f       	adc	r26, r26
 926:	a9 f3       	breq	.-22     	; 0x912 <__divsf3_pse+0x10>
 928:	35 d0       	rcall	.+106    	; 0x994 <__divsf3_pse+0x92>
 92a:	0e 2e       	mov	r0, r30
 92c:	3a f0       	brmi	.+14     	; 0x93c <__divsf3_pse+0x3a>
 92e:	e0 e8       	ldi	r30, 0x80	; 128
 930:	32 d0       	rcall	.+100    	; 0x996 <__divsf3_pse+0x94>
 932:	91 50       	subi	r25, 0x01	; 1
 934:	50 40       	sbci	r21, 0x00	; 0
 936:	e6 95       	lsr	r30
 938:	00 1c       	adc	r0, r0
 93a:	ca f7       	brpl	.-14     	; 0x92e <__divsf3_pse+0x2c>
 93c:	2b d0       	rcall	.+86     	; 0x994 <__divsf3_pse+0x92>
 93e:	fe 2f       	mov	r31, r30
 940:	29 d0       	rcall	.+82     	; 0x994 <__divsf3_pse+0x92>
 942:	66 0f       	add	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	bb 1f       	adc	r27, r27
 94a:	26 17       	cp	r18, r22
 94c:	37 07       	cpc	r19, r23
 94e:	48 07       	cpc	r20, r24
 950:	ab 07       	cpc	r26, r27
 952:	b0 e8       	ldi	r27, 0x80	; 128
 954:	09 f0       	breq	.+2      	; 0x958 <__divsf3_pse+0x56>
 956:	bb 0b       	sbc	r27, r27
 958:	80 2d       	mov	r24, r0
 95a:	bf 01       	movw	r22, r30
 95c:	ff 27       	eor	r31, r31
 95e:	93 58       	subi	r25, 0x83	; 131
 960:	5f 4f       	sbci	r21, 0xFF	; 255
 962:	3a f0       	brmi	.+14     	; 0x972 <__divsf3_pse+0x70>
 964:	9e 3f       	cpi	r25, 0xFE	; 254
 966:	51 05       	cpc	r21, r1
 968:	78 f0       	brcs	.+30     	; 0x988 <__divsf3_pse+0x86>
 96a:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_inf>
 96e:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_szero>
 972:	5f 3f       	cpi	r21, 0xFF	; 255
 974:	e4 f3       	brlt	.-8      	; 0x96e <__divsf3_pse+0x6c>
 976:	98 3e       	cpi	r25, 0xE8	; 232
 978:	d4 f3       	brlt	.-12     	; 0x96e <__divsf3_pse+0x6c>
 97a:	86 95       	lsr	r24
 97c:	77 95       	ror	r23
 97e:	67 95       	ror	r22
 980:	b7 95       	ror	r27
 982:	f7 95       	ror	r31
 984:	9f 5f       	subi	r25, 0xFF	; 255
 986:	c9 f7       	brne	.-14     	; 0x97a <__divsf3_pse+0x78>
 988:	88 0f       	add	r24, r24
 98a:	91 1d       	adc	r25, r1
 98c:	96 95       	lsr	r25
 98e:	87 95       	ror	r24
 990:	97 f9       	bld	r25, 7
 992:	08 95       	ret
 994:	e1 e0       	ldi	r30, 0x01	; 1
 996:	66 0f       	add	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	bb 1f       	adc	r27, r27
 99e:	62 17       	cp	r22, r18
 9a0:	73 07       	cpc	r23, r19
 9a2:	84 07       	cpc	r24, r20
 9a4:	ba 07       	cpc	r27, r26
 9a6:	20 f0       	brcs	.+8      	; 0x9b0 <__divsf3_pse+0xae>
 9a8:	62 1b       	sub	r22, r18
 9aa:	73 0b       	sbc	r23, r19
 9ac:	84 0b       	sbc	r24, r20
 9ae:	ba 0b       	sbc	r27, r26
 9b0:	ee 1f       	adc	r30, r30
 9b2:	88 f7       	brcc	.-30     	; 0x996 <__divsf3_pse+0x94>
 9b4:	e0 95       	com	r30
 9b6:	08 95       	ret

000009b8 <__fixsfsi>:
 9b8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixunssfsi>
 9bc:	68 94       	set
 9be:	b1 11       	cpse	r27, r1
 9c0:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_szero>
 9c4:	08 95       	ret

000009c6 <__fixunssfsi>:
 9c6:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_splitA>
 9ca:	88 f0       	brcs	.+34     	; 0x9ee <__fixunssfsi+0x28>
 9cc:	9f 57       	subi	r25, 0x7F	; 127
 9ce:	98 f0       	brcs	.+38     	; 0x9f6 <__fixunssfsi+0x30>
 9d0:	b9 2f       	mov	r27, r25
 9d2:	99 27       	eor	r25, r25
 9d4:	b7 51       	subi	r27, 0x17	; 23
 9d6:	b0 f0       	brcs	.+44     	; 0xa04 <__fixunssfsi+0x3e>
 9d8:	e1 f0       	breq	.+56     	; 0xa12 <__fixunssfsi+0x4c>
 9da:	66 0f       	add	r22, r22
 9dc:	77 1f       	adc	r23, r23
 9de:	88 1f       	adc	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	1a f0       	brmi	.+6      	; 0x9ea <__fixunssfsi+0x24>
 9e4:	ba 95       	dec	r27
 9e6:	c9 f7       	brne	.-14     	; 0x9da <__fixunssfsi+0x14>
 9e8:	14 c0       	rjmp	.+40     	; 0xa12 <__fixunssfsi+0x4c>
 9ea:	b1 30       	cpi	r27, 0x01	; 1
 9ec:	91 f0       	breq	.+36     	; 0xa12 <__fixunssfsi+0x4c>
 9ee:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_zero>
 9f2:	b1 e0       	ldi	r27, 0x01	; 1
 9f4:	08 95       	ret
 9f6:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_zero>
 9fa:	67 2f       	mov	r22, r23
 9fc:	78 2f       	mov	r23, r24
 9fe:	88 27       	eor	r24, r24
 a00:	b8 5f       	subi	r27, 0xF8	; 248
 a02:	39 f0       	breq	.+14     	; 0xa12 <__fixunssfsi+0x4c>
 a04:	b9 3f       	cpi	r27, 0xF9	; 249
 a06:	cc f3       	brlt	.-14     	; 0x9fa <__fixunssfsi+0x34>
 a08:	86 95       	lsr	r24
 a0a:	77 95       	ror	r23
 a0c:	67 95       	ror	r22
 a0e:	b3 95       	inc	r27
 a10:	d9 f7       	brne	.-10     	; 0xa08 <__fixunssfsi+0x42>
 a12:	3e f4       	brtc	.+14     	; 0xa22 <__fixunssfsi+0x5c>
 a14:	90 95       	com	r25
 a16:	80 95       	com	r24
 a18:	70 95       	com	r23
 a1a:	61 95       	neg	r22
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	08 95       	ret

00000a24 <__floatunsisf>:
 a24:	e8 94       	clt
 a26:	09 c0       	rjmp	.+18     	; 0xa3a <__floatsisf+0x12>

00000a28 <__floatsisf>:
 a28:	97 fb       	bst	r25, 7
 a2a:	3e f4       	brtc	.+14     	; 0xa3a <__floatsisf+0x12>
 a2c:	90 95       	com	r25
 a2e:	80 95       	com	r24
 a30:	70 95       	com	r23
 a32:	61 95       	neg	r22
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	99 23       	and	r25, r25
 a3c:	a9 f0       	breq	.+42     	; 0xa68 <__floatsisf+0x40>
 a3e:	f9 2f       	mov	r31, r25
 a40:	96 e9       	ldi	r25, 0x96	; 150
 a42:	bb 27       	eor	r27, r27
 a44:	93 95       	inc	r25
 a46:	f6 95       	lsr	r31
 a48:	87 95       	ror	r24
 a4a:	77 95       	ror	r23
 a4c:	67 95       	ror	r22
 a4e:	b7 95       	ror	r27
 a50:	f1 11       	cpse	r31, r1
 a52:	f8 cf       	rjmp	.-16     	; 0xa44 <__floatsisf+0x1c>
 a54:	fa f4       	brpl	.+62     	; 0xa94 <__floatsisf+0x6c>
 a56:	bb 0f       	add	r27, r27
 a58:	11 f4       	brne	.+4      	; 0xa5e <__floatsisf+0x36>
 a5a:	60 ff       	sbrs	r22, 0
 a5c:	1b c0       	rjmp	.+54     	; 0xa94 <__floatsisf+0x6c>
 a5e:	6f 5f       	subi	r22, 0xFF	; 255
 a60:	7f 4f       	sbci	r23, 0xFF	; 255
 a62:	8f 4f       	sbci	r24, 0xFF	; 255
 a64:	9f 4f       	sbci	r25, 0xFF	; 255
 a66:	16 c0       	rjmp	.+44     	; 0xa94 <__floatsisf+0x6c>
 a68:	88 23       	and	r24, r24
 a6a:	11 f0       	breq	.+4      	; 0xa70 <__floatsisf+0x48>
 a6c:	96 e9       	ldi	r25, 0x96	; 150
 a6e:	11 c0       	rjmp	.+34     	; 0xa92 <__floatsisf+0x6a>
 a70:	77 23       	and	r23, r23
 a72:	21 f0       	breq	.+8      	; 0xa7c <__floatsisf+0x54>
 a74:	9e e8       	ldi	r25, 0x8E	; 142
 a76:	87 2f       	mov	r24, r23
 a78:	76 2f       	mov	r23, r22
 a7a:	05 c0       	rjmp	.+10     	; 0xa86 <__floatsisf+0x5e>
 a7c:	66 23       	and	r22, r22
 a7e:	71 f0       	breq	.+28     	; 0xa9c <__floatsisf+0x74>
 a80:	96 e8       	ldi	r25, 0x86	; 134
 a82:	86 2f       	mov	r24, r22
 a84:	70 e0       	ldi	r23, 0x00	; 0
 a86:	60 e0       	ldi	r22, 0x00	; 0
 a88:	2a f0       	brmi	.+10     	; 0xa94 <__floatsisf+0x6c>
 a8a:	9a 95       	dec	r25
 a8c:	66 0f       	add	r22, r22
 a8e:	77 1f       	adc	r23, r23
 a90:	88 1f       	adc	r24, r24
 a92:	da f7       	brpl	.-10     	; 0xa8a <__floatsisf+0x62>
 a94:	88 0f       	add	r24, r24
 a96:	96 95       	lsr	r25
 a98:	87 95       	ror	r24
 a9a:	97 f9       	bld	r25, 7
 a9c:	08 95       	ret

00000a9e <__fp_inf>:
 a9e:	97 f9       	bld	r25, 7
 aa0:	9f 67       	ori	r25, 0x7F	; 127
 aa2:	80 e8       	ldi	r24, 0x80	; 128
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	60 e0       	ldi	r22, 0x00	; 0
 aa8:	08 95       	ret

00000aaa <__fp_nan>:
 aaa:	9f ef       	ldi	r25, 0xFF	; 255
 aac:	80 ec       	ldi	r24, 0xC0	; 192
 aae:	08 95       	ret

00000ab0 <__fp_pscA>:
 ab0:	00 24       	eor	r0, r0
 ab2:	0a 94       	dec	r0
 ab4:	16 16       	cp	r1, r22
 ab6:	17 06       	cpc	r1, r23
 ab8:	18 06       	cpc	r1, r24
 aba:	09 06       	cpc	r0, r25
 abc:	08 95       	ret

00000abe <__fp_pscB>:
 abe:	00 24       	eor	r0, r0
 ac0:	0a 94       	dec	r0
 ac2:	12 16       	cp	r1, r18
 ac4:	13 06       	cpc	r1, r19
 ac6:	14 06       	cpc	r1, r20
 ac8:	05 06       	cpc	r0, r21
 aca:	08 95       	ret

00000acc <__fp_round>:
 acc:	09 2e       	mov	r0, r25
 ace:	03 94       	inc	r0
 ad0:	00 0c       	add	r0, r0
 ad2:	11 f4       	brne	.+4      	; 0xad8 <__fp_round+0xc>
 ad4:	88 23       	and	r24, r24
 ad6:	52 f0       	brmi	.+20     	; 0xaec <__fp_round+0x20>
 ad8:	bb 0f       	add	r27, r27
 ada:	40 f4       	brcc	.+16     	; 0xaec <__fp_round+0x20>
 adc:	bf 2b       	or	r27, r31
 ade:	11 f4       	brne	.+4      	; 0xae4 <__fp_round+0x18>
 ae0:	60 ff       	sbrs	r22, 0
 ae2:	04 c0       	rjmp	.+8      	; 0xaec <__fp_round+0x20>
 ae4:	6f 5f       	subi	r22, 0xFF	; 255
 ae6:	7f 4f       	sbci	r23, 0xFF	; 255
 ae8:	8f 4f       	sbci	r24, 0xFF	; 255
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	08 95       	ret

00000aee <__fp_split3>:
 aee:	57 fd       	sbrc	r21, 7
 af0:	90 58       	subi	r25, 0x80	; 128
 af2:	44 0f       	add	r20, r20
 af4:	55 1f       	adc	r21, r21
 af6:	59 f0       	breq	.+22     	; 0xb0e <__fp_splitA+0x10>
 af8:	5f 3f       	cpi	r21, 0xFF	; 255
 afa:	71 f0       	breq	.+28     	; 0xb18 <__fp_splitA+0x1a>
 afc:	47 95       	ror	r20

00000afe <__fp_splitA>:
 afe:	88 0f       	add	r24, r24
 b00:	97 fb       	bst	r25, 7
 b02:	99 1f       	adc	r25, r25
 b04:	61 f0       	breq	.+24     	; 0xb1e <__fp_splitA+0x20>
 b06:	9f 3f       	cpi	r25, 0xFF	; 255
 b08:	79 f0       	breq	.+30     	; 0xb28 <__fp_splitA+0x2a>
 b0a:	87 95       	ror	r24
 b0c:	08 95       	ret
 b0e:	12 16       	cp	r1, r18
 b10:	13 06       	cpc	r1, r19
 b12:	14 06       	cpc	r1, r20
 b14:	55 1f       	adc	r21, r21
 b16:	f2 cf       	rjmp	.-28     	; 0xafc <__fp_split3+0xe>
 b18:	46 95       	lsr	r20
 b1a:	f1 df       	rcall	.-30     	; 0xafe <__fp_splitA>
 b1c:	08 c0       	rjmp	.+16     	; 0xb2e <__fp_splitA+0x30>
 b1e:	16 16       	cp	r1, r22
 b20:	17 06       	cpc	r1, r23
 b22:	18 06       	cpc	r1, r24
 b24:	99 1f       	adc	r25, r25
 b26:	f1 cf       	rjmp	.-30     	; 0xb0a <__fp_splitA+0xc>
 b28:	86 95       	lsr	r24
 b2a:	71 05       	cpc	r23, r1
 b2c:	61 05       	cpc	r22, r1
 b2e:	08 94       	sec
 b30:	08 95       	ret

00000b32 <__fp_zero>:
 b32:	e8 94       	clt

00000b34 <__fp_szero>:
 b34:	bb 27       	eor	r27, r27
 b36:	66 27       	eor	r22, r22
 b38:	77 27       	eor	r23, r23
 b3a:	cb 01       	movw	r24, r22
 b3c:	97 f9       	bld	r25, 7
 b3e:	08 95       	ret

00000b40 <__mulsf3>:
 b40:	0e 94 b3 05 	call	0xb66	; 0xb66 <__mulsf3x>
 b44:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_round>
 b48:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_pscA>
 b4c:	38 f0       	brcs	.+14     	; 0xb5c <__mulsf3+0x1c>
 b4e:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_pscB>
 b52:	20 f0       	brcs	.+8      	; 0xb5c <__mulsf3+0x1c>
 b54:	95 23       	and	r25, r21
 b56:	11 f0       	breq	.+4      	; 0xb5c <__mulsf3+0x1c>
 b58:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_inf>
 b5c:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__fp_nan>
 b60:	11 24       	eor	r1, r1
 b62:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_szero>

00000b66 <__mulsf3x>:
 b66:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_split3>
 b6a:	70 f3       	brcs	.-36     	; 0xb48 <__mulsf3+0x8>

00000b6c <__mulsf3_pse>:
 b6c:	95 9f       	mul	r25, r21
 b6e:	c1 f3       	breq	.-16     	; 0xb60 <__mulsf3+0x20>
 b70:	95 0f       	add	r25, r21
 b72:	50 e0       	ldi	r21, 0x00	; 0
 b74:	55 1f       	adc	r21, r21
 b76:	62 9f       	mul	r22, r18
 b78:	f0 01       	movw	r30, r0
 b7a:	72 9f       	mul	r23, r18
 b7c:	bb 27       	eor	r27, r27
 b7e:	f0 0d       	add	r31, r0
 b80:	b1 1d       	adc	r27, r1
 b82:	63 9f       	mul	r22, r19
 b84:	aa 27       	eor	r26, r26
 b86:	f0 0d       	add	r31, r0
 b88:	b1 1d       	adc	r27, r1
 b8a:	aa 1f       	adc	r26, r26
 b8c:	64 9f       	mul	r22, r20
 b8e:	66 27       	eor	r22, r22
 b90:	b0 0d       	add	r27, r0
 b92:	a1 1d       	adc	r26, r1
 b94:	66 1f       	adc	r22, r22
 b96:	82 9f       	mul	r24, r18
 b98:	22 27       	eor	r18, r18
 b9a:	b0 0d       	add	r27, r0
 b9c:	a1 1d       	adc	r26, r1
 b9e:	62 1f       	adc	r22, r18
 ba0:	73 9f       	mul	r23, r19
 ba2:	b0 0d       	add	r27, r0
 ba4:	a1 1d       	adc	r26, r1
 ba6:	62 1f       	adc	r22, r18
 ba8:	83 9f       	mul	r24, r19
 baa:	a0 0d       	add	r26, r0
 bac:	61 1d       	adc	r22, r1
 bae:	22 1f       	adc	r18, r18
 bb0:	74 9f       	mul	r23, r20
 bb2:	33 27       	eor	r19, r19
 bb4:	a0 0d       	add	r26, r0
 bb6:	61 1d       	adc	r22, r1
 bb8:	23 1f       	adc	r18, r19
 bba:	84 9f       	mul	r24, r20
 bbc:	60 0d       	add	r22, r0
 bbe:	21 1d       	adc	r18, r1
 bc0:	82 2f       	mov	r24, r18
 bc2:	76 2f       	mov	r23, r22
 bc4:	6a 2f       	mov	r22, r26
 bc6:	11 24       	eor	r1, r1
 bc8:	9f 57       	subi	r25, 0x7F	; 127
 bca:	50 40       	sbci	r21, 0x00	; 0
 bcc:	9a f0       	brmi	.+38     	; 0xbf4 <__mulsf3_pse+0x88>
 bce:	f1 f0       	breq	.+60     	; 0xc0c <__mulsf3_pse+0xa0>
 bd0:	88 23       	and	r24, r24
 bd2:	4a f0       	brmi	.+18     	; 0xbe6 <__mulsf3_pse+0x7a>
 bd4:	ee 0f       	add	r30, r30
 bd6:	ff 1f       	adc	r31, r31
 bd8:	bb 1f       	adc	r27, r27
 bda:	66 1f       	adc	r22, r22
 bdc:	77 1f       	adc	r23, r23
 bde:	88 1f       	adc	r24, r24
 be0:	91 50       	subi	r25, 0x01	; 1
 be2:	50 40       	sbci	r21, 0x00	; 0
 be4:	a9 f7       	brne	.-22     	; 0xbd0 <__mulsf3_pse+0x64>
 be6:	9e 3f       	cpi	r25, 0xFE	; 254
 be8:	51 05       	cpc	r21, r1
 bea:	80 f0       	brcs	.+32     	; 0xc0c <__mulsf3_pse+0xa0>
 bec:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_inf>
 bf0:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_szero>
 bf4:	5f 3f       	cpi	r21, 0xFF	; 255
 bf6:	e4 f3       	brlt	.-8      	; 0xbf0 <__mulsf3_pse+0x84>
 bf8:	98 3e       	cpi	r25, 0xE8	; 232
 bfa:	d4 f3       	brlt	.-12     	; 0xbf0 <__mulsf3_pse+0x84>
 bfc:	86 95       	lsr	r24
 bfe:	77 95       	ror	r23
 c00:	67 95       	ror	r22
 c02:	b7 95       	ror	r27
 c04:	f7 95       	ror	r31
 c06:	e7 95       	ror	r30
 c08:	9f 5f       	subi	r25, 0xFF	; 255
 c0a:	c1 f7       	brne	.-16     	; 0xbfc <__mulsf3_pse+0x90>
 c0c:	fe 2b       	or	r31, r30
 c0e:	88 0f       	add	r24, r24
 c10:	91 1d       	adc	r25, r1
 c12:	96 95       	lsr	r25
 c14:	87 95       	ror	r24
 c16:	97 f9       	bld	r25, 7
 c18:	08 95       	ret

00000c1a <__itoa_ncheck>:
 c1a:	bb 27       	eor	r27, r27
 c1c:	4a 30       	cpi	r20, 0x0A	; 10
 c1e:	31 f4       	brne	.+12     	; 0xc2c <__itoa_ncheck+0x12>
 c20:	99 23       	and	r25, r25
 c22:	22 f4       	brpl	.+8      	; 0xc2c <__itoa_ncheck+0x12>
 c24:	bd e2       	ldi	r27, 0x2D	; 45
 c26:	90 95       	com	r25
 c28:	81 95       	neg	r24
 c2a:	9f 4f       	sbci	r25, 0xFF	; 255
 c2c:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__utoa_common>

00000c30 <__utoa_ncheck>:
 c30:	bb 27       	eor	r27, r27

00000c32 <__utoa_common>:
 c32:	fb 01       	movw	r30, r22
 c34:	55 27       	eor	r21, r21
 c36:	aa 27       	eor	r26, r26
 c38:	88 0f       	add	r24, r24
 c3a:	99 1f       	adc	r25, r25
 c3c:	aa 1f       	adc	r26, r26
 c3e:	a4 17       	cp	r26, r20
 c40:	10 f0       	brcs	.+4      	; 0xc46 <__utoa_common+0x14>
 c42:	a4 1b       	sub	r26, r20
 c44:	83 95       	inc	r24
 c46:	50 51       	subi	r21, 0x10	; 16
 c48:	b9 f7       	brne	.-18     	; 0xc38 <__utoa_common+0x6>
 c4a:	a0 5d       	subi	r26, 0xD0	; 208
 c4c:	aa 33       	cpi	r26, 0x3A	; 58
 c4e:	08 f0       	brcs	.+2      	; 0xc52 <__utoa_common+0x20>
 c50:	a9 5d       	subi	r26, 0xD9	; 217
 c52:	a1 93       	st	Z+, r26
 c54:	00 97       	sbiw	r24, 0x00	; 0
 c56:	79 f7       	brne	.-34     	; 0xc36 <__utoa_common+0x4>
 c58:	b1 11       	cpse	r27, r1
 c5a:	b1 93       	st	Z+, r27
 c5c:	11 92       	st	Z+, r1
 c5e:	cb 01       	movw	r24, r22
 c60:	0c 94 32 06 	jmp	0xc64	; 0xc64 <strrev>

00000c64 <strrev>:
 c64:	dc 01       	movw	r26, r24
 c66:	fc 01       	movw	r30, r24
 c68:	67 2f       	mov	r22, r23
 c6a:	71 91       	ld	r23, Z+
 c6c:	77 23       	and	r23, r23
 c6e:	e1 f7       	brne	.-8      	; 0xc68 <strrev+0x4>
 c70:	32 97       	sbiw	r30, 0x02	; 2
 c72:	04 c0       	rjmp	.+8      	; 0xc7c <strrev+0x18>
 c74:	7c 91       	ld	r23, X
 c76:	6d 93       	st	X+, r22
 c78:	70 83       	st	Z, r23
 c7a:	62 91       	ld	r22, -Z
 c7c:	ae 17       	cp	r26, r30
 c7e:	bf 07       	cpc	r27, r31
 c80:	c8 f3       	brcs	.-14     	; 0xc74 <strrev+0x10>
 c82:	08 95       	ret

00000c84 <_exit>:
 c84:	f8 94       	cli

00000c86 <__stop_program>:
 c86:	ff cf       	rjmp	.-2      	; 0xc86 <__stop_program>
